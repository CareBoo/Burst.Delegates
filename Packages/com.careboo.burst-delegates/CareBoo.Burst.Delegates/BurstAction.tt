<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ output extension=".gen.cs" #>

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using Unity.Burst;
using UnityEngine;

namespace CareBoo.Burst.Delegates
{
<#
var GENERIC_PARAMS = new[]
{
    "",
    "T",
    "U",
    "V",
    "W",
    "X",
    "Y",
    "Z"
};

for (var i = 0; i < GENERIC_PARAMS.Length; i++)
{
    var GENERIC_CONSTRAINTS = "";
    for (var j = 1; j <= i; j++)
    {
        GENERIC_CONSTRAINTS += $"\n        where {GENERIC_PARAMS[j]} : struct";
    }

    var GENERIC_DEF = i > 0 ? $"<{string.Join(", ", GENERIC_PARAMS.Skip(1).Take(i))}>" : "";
    var GENERIC_ARGS_TYPED = string.Join(", ", GENERIC_PARAMS.Skip(1).Take(i).Select((t, n) => $"{t} arg{n}"));
    var GENERIC_ARGS = string.Join(", ", GENERIC_PARAMS.Skip(1).Take(i).Select((t, n) => $"arg{n}"));

#>
    public struct BurstAction<#=GENERIC_DEF#>
        : IAction<#=GENERIC_DEF#><#=GENERIC_CONSTRAINTS#>
    {
        readonly FunctionPointer<Action<#=GENERIC_DEF#>> functionPointer;

        bool burstFlag;

        public BurstAction(FunctionPointer<Action<#=GENERIC_DEF#>> functionPointer)
        {
            this.functionPointer = functionPointer;
            burstFlag = true;
        }

        public void Invoke(<#=GENERIC_ARGS_TYPED#>)
        {
            CheckBurst();

            if (burstFlag)
                functionPointer.Invoke(<#=GENERIC_ARGS#>);
        }

        [BurstDiscard]
        private void CheckBurst()
        {
            burstFlag = false;
            Debug.LogError("BurstAction does not support being run outside burst-compiled code.");
        }

        public static BurstAction<#=GENERIC_DEF#> Compile(Action<#=GENERIC_DEF#> action)
        {
            var functionPointer = BurstCompiler.CompileFunctionPointer(action);
            return new BurstAction<#=GENERIC_DEF#>(functionPointer);
        }

        public static implicit operator ValueAction<#=GENERIC_DEF#>.Struct<BurstAction<#=GENERIC_DEF#>>(BurstAction<#=GENERIC_DEF#> burstAction)
        {
            return ValueAction<#=GENERIC_DEF#>.New(burstAction);
        }

        public static implicit operator BurstAction<#=GENERIC_DEF#>(ValueAction<#=GENERIC_DEF#>.Struct<BurstAction<#=GENERIC_DEF#>> valueAction)
        {
            return valueAction.lambda;
        }
    }

<#
}
#>
}