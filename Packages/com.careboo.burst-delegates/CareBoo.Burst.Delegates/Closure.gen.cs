//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------




using System;

namespace CareBoo.Burst.Delegates
{

    public struct Closure<T>
        where T: struct
    {

        public struct AppliedToAction<TAction>
            : IAction
            
            where TAction : struct, IAction<T>
        {
            readonly T arg0;
            readonly ValueAction<T>.Impl<TAction> action;

            public AppliedToAction(
                T arg0,
                ValueAction<T>.Impl<TAction> action
                )
            {
                this.arg0 = arg0;
                this.action = action;
            }

            public void Invoke()
            {
                action.Invoke(arg0);
            }
        }

        public struct AppliedToFunc<TResult, TFunc>
            : IFunc<TResult>
            where TResult: struct
            where TFunc : struct, IFunc<T, TResult>
        {
            readonly T arg0;
            readonly ValueFunc<T, TResult>.Impl<TFunc> func;

            public AppliedToFunc(
                T arg0,
                ValueFunc<T, TResult>.Impl<TFunc> func
            )
            {
                this.arg0 = arg0;
                this.func = func;
            }

            public TResult Invoke()
            {
                return func.Invoke(arg0);
            }
        }


        public struct AppliedToAction<U, TAction>
            : IAction<U>
            where U: struct
            where TAction : struct, IAction<T, U>
        {
            readonly T arg0;
            readonly ValueAction<T, U>.Impl<TAction> action;

            public AppliedToAction(
                T arg0,
                ValueAction<T, U>.Impl<TAction> action
                )
            {
                this.arg0 = arg0;
                this.action = action;
            }

            public void Invoke(U arg1)
            {
                action.Invoke(arg0, arg1);
            }
        }

        public struct AppliedToFunc<U, TResult, TFunc>
            : IFunc<U, TResult>
            where U: struct
            where TResult: struct
            where TFunc : struct, IFunc<T, U, TResult>
        {
            readonly T arg0;
            readonly ValueFunc<T, U, TResult>.Impl<TFunc> func;

            public AppliedToFunc(
                T arg0,
                ValueFunc<T, U, TResult>.Impl<TFunc> func
            )
            {
                this.arg0 = arg0;
                this.func = func;
            }

            public TResult Invoke(U arg1)
            {
                return func.Invoke(arg0, arg1);
            }
        }


        public struct AppliedToAction<U, V, TAction>
            : IAction<U, V>
            where U: struct
            where V: struct
            where TAction : struct, IAction<T, U, V>
        {
            readonly T arg0;
            readonly ValueAction<T, U, V>.Impl<TAction> action;

            public AppliedToAction(
                T arg0,
                ValueAction<T, U, V>.Impl<TAction> action
                )
            {
                this.arg0 = arg0;
                this.action = action;
            }

            public void Invoke(U arg1, V arg2)
            {
                action.Invoke(arg0, arg1, arg2);
            }
        }

        public struct AppliedToFunc<U, V, TResult, TFunc>
            : IFunc<U, V, TResult>
            where U: struct
            where V: struct
            where TResult: struct
            where TFunc : struct, IFunc<T, U, V, TResult>
        {
            readonly T arg0;
            readonly ValueFunc<T, U, V, TResult>.Impl<TFunc> func;

            public AppliedToFunc(
                T arg0,
                ValueFunc<T, U, V, TResult>.Impl<TFunc> func
            )
            {
                this.arg0 = arg0;
                this.func = func;
            }

            public TResult Invoke(U arg1, V arg2)
            {
                return func.Invoke(arg0, arg1, arg2);
            }
        }


        public struct AppliedToAction<U, V, W, TAction>
            : IAction<U, V, W>
            where U: struct
            where V: struct
            where W: struct
            where TAction : struct, IAction<T, U, V, W>
        {
            readonly T arg0;
            readonly ValueAction<T, U, V, W>.Impl<TAction> action;

            public AppliedToAction(
                T arg0,
                ValueAction<T, U, V, W>.Impl<TAction> action
                )
            {
                this.arg0 = arg0;
                this.action = action;
            }

            public void Invoke(U arg1, V arg2, W arg3)
            {
                action.Invoke(arg0, arg1, arg2, arg3);
            }
        }

        public struct AppliedToFunc<U, V, W, TResult, TFunc>
            : IFunc<U, V, W, TResult>
            where U: struct
            where V: struct
            where W: struct
            where TResult: struct
            where TFunc : struct, IFunc<T, U, V, W, TResult>
        {
            readonly T arg0;
            readonly ValueFunc<T, U, V, W, TResult>.Impl<TFunc> func;

            public AppliedToFunc(
                T arg0,
                ValueFunc<T, U, V, W, TResult>.Impl<TFunc> func
            )
            {
                this.arg0 = arg0;
                this.func = func;
            }

            public TResult Invoke(U arg1, V arg2, W arg3)
            {
                return func.Invoke(arg0, arg1, arg2, arg3);
            }
        }


        public struct AppliedToAction<U, V, W, X, TAction>
            : IAction<U, V, W, X>
            where U: struct
            where V: struct
            where W: struct
            where X: struct
            where TAction : struct, IAction<T, U, V, W, X>
        {
            readonly T arg0;
            readonly ValueAction<T, U, V, W, X>.Impl<TAction> action;

            public AppliedToAction(
                T arg0,
                ValueAction<T, U, V, W, X>.Impl<TAction> action
                )
            {
                this.arg0 = arg0;
                this.action = action;
            }

            public void Invoke(U arg1, V arg2, W arg3, X arg4)
            {
                action.Invoke(arg0, arg1, arg2, arg3, arg4);
            }
        }

        public struct AppliedToFunc<U, V, W, X, TResult, TFunc>
            : IFunc<U, V, W, X, TResult>
            where U: struct
            where V: struct
            where W: struct
            where X: struct
            where TResult: struct
            where TFunc : struct, IFunc<T, U, V, W, X, TResult>
        {
            readonly T arg0;
            readonly ValueFunc<T, U, V, W, X, TResult>.Impl<TFunc> func;

            public AppliedToFunc(
                T arg0,
                ValueFunc<T, U, V, W, X, TResult>.Impl<TFunc> func
            )
            {
                this.arg0 = arg0;
                this.func = func;
            }

            public TResult Invoke(U arg1, V arg2, W arg3, X arg4)
            {
                return func.Invoke(arg0, arg1, arg2, arg3, arg4);
            }
        }


        public struct AppliedToAction<U, V, W, X, Y, TAction>
            : IAction<U, V, W, X, Y>
            where U: struct
            where V: struct
            where W: struct
            where X: struct
            where Y: struct
            where TAction : struct, IAction<T, U, V, W, X, Y>
        {
            readonly T arg0;
            readonly ValueAction<T, U, V, W, X, Y>.Impl<TAction> action;

            public AppliedToAction(
                T arg0,
                ValueAction<T, U, V, W, X, Y>.Impl<TAction> action
                )
            {
                this.arg0 = arg0;
                this.action = action;
            }

            public void Invoke(U arg1, V arg2, W arg3, X arg4, Y arg5)
            {
                action.Invoke(arg0, arg1, arg2, arg3, arg4, arg5);
            }
        }

        public struct AppliedToFunc<U, V, W, X, Y, TResult, TFunc>
            : IFunc<U, V, W, X, Y, TResult>
            where U: struct
            where V: struct
            where W: struct
            where X: struct
            where Y: struct
            where TResult: struct
            where TFunc : struct, IFunc<T, U, V, W, X, Y, TResult>
        {
            readonly T arg0;
            readonly ValueFunc<T, U, V, W, X, Y, TResult>.Impl<TFunc> func;

            public AppliedToFunc(
                T arg0,
                ValueFunc<T, U, V, W, X, Y, TResult>.Impl<TFunc> func
            )
            {
                this.arg0 = arg0;
                this.func = func;
            }

            public TResult Invoke(U arg1, V arg2, W arg3, X arg4, Y arg5)
            {
                return func.Invoke(arg0, arg1, arg2, arg3, arg4, arg5);
            }
        }


        public struct AppliedToAction<U, V, W, X, Y, Z, TAction>
            : IAction<U, V, W, X, Y, Z>
            where U: struct
            where V: struct
            where W: struct
            where X: struct
            where Y: struct
            where Z: struct
            where TAction : struct, IAction<T, U, V, W, X, Y, Z>
        {
            readonly T arg0;
            readonly ValueAction<T, U, V, W, X, Y, Z>.Impl<TAction> action;

            public AppliedToAction(
                T arg0,
                ValueAction<T, U, V, W, X, Y, Z>.Impl<TAction> action
                )
            {
                this.arg0 = arg0;
                this.action = action;
            }

            public void Invoke(U arg1, V arg2, W arg3, X arg4, Y arg5, Z arg6)
            {
                action.Invoke(arg0, arg1, arg2, arg3, arg4, arg5, arg6);
            }
        }

        public struct AppliedToFunc<U, V, W, X, Y, Z, TResult, TFunc>
            : IFunc<U, V, W, X, Y, Z, TResult>
            where U: struct
            where V: struct
            where W: struct
            where X: struct
            where Y: struct
            where Z: struct
            where TResult: struct
            where TFunc : struct, IFunc<T, U, V, W, X, Y, Z, TResult>
        {
            readonly T arg0;
            readonly ValueFunc<T, U, V, W, X, Y, Z, TResult>.Impl<TFunc> func;

            public AppliedToFunc(
                T arg0,
                ValueFunc<T, U, V, W, X, Y, Z, TResult>.Impl<TFunc> func
            )
            {
                this.arg0 = arg0;
                this.func = func;
            }

            public TResult Invoke(U arg1, V arg2, W arg3, X arg4, Y arg5, Z arg6)
            {
                return func.Invoke(arg0, arg1, arg2, arg3, arg4, arg5, arg6);
            }
        }


    }


    public struct Closure<T, U>
        where T: struct
        where U: struct
    {

        public struct AppliedToAction<TAction>
            : IAction
            
            where TAction : struct, IAction<T, U>
        {
            readonly T arg0;
            readonly U arg1;
            readonly ValueAction<T, U>.Impl<TAction> action;

            public AppliedToAction(
                T arg0,
                U arg1,
                ValueAction<T, U>.Impl<TAction> action
                )
            {
                this.arg0 = arg0;
                this.arg1 = arg1;
                this.action = action;
            }

            public void Invoke()
            {
                action.Invoke(arg0, arg1);
            }
        }

        public struct AppliedToFunc<TResult, TFunc>
            : IFunc<TResult>
            where TResult: struct
            where TFunc : struct, IFunc<T, U, TResult>
        {
            readonly T arg0;
            readonly U arg1;
            readonly ValueFunc<T, U, TResult>.Impl<TFunc> func;

            public AppliedToFunc(
                T arg0,
                U arg1,
                ValueFunc<T, U, TResult>.Impl<TFunc> func
            )
            {
                this.arg0 = arg0;
                this.arg1 = arg1;
                this.func = func;
            }

            public TResult Invoke()
            {
                return func.Invoke(arg0, arg1);
            }
        }


        public struct AppliedToAction<V, TAction>
            : IAction<V>
            where V: struct
            where TAction : struct, IAction<T, U, V>
        {
            readonly T arg0;
            readonly U arg1;
            readonly ValueAction<T, U, V>.Impl<TAction> action;

            public AppliedToAction(
                T arg0,
                U arg1,
                ValueAction<T, U, V>.Impl<TAction> action
                )
            {
                this.arg0 = arg0;
                this.arg1 = arg1;
                this.action = action;
            }

            public void Invoke(V arg2)
            {
                action.Invoke(arg0, arg1, arg2);
            }
        }

        public struct AppliedToFunc<V, TResult, TFunc>
            : IFunc<V, TResult>
            where V: struct
            where TResult: struct
            where TFunc : struct, IFunc<T, U, V, TResult>
        {
            readonly T arg0;
            readonly U arg1;
            readonly ValueFunc<T, U, V, TResult>.Impl<TFunc> func;

            public AppliedToFunc(
                T arg0,
                U arg1,
                ValueFunc<T, U, V, TResult>.Impl<TFunc> func
            )
            {
                this.arg0 = arg0;
                this.arg1 = arg1;
                this.func = func;
            }

            public TResult Invoke(V arg2)
            {
                return func.Invoke(arg0, arg1, arg2);
            }
        }


        public struct AppliedToAction<V, W, TAction>
            : IAction<V, W>
            where V: struct
            where W: struct
            where TAction : struct, IAction<T, U, V, W>
        {
            readonly T arg0;
            readonly U arg1;
            readonly ValueAction<T, U, V, W>.Impl<TAction> action;

            public AppliedToAction(
                T arg0,
                U arg1,
                ValueAction<T, U, V, W>.Impl<TAction> action
                )
            {
                this.arg0 = arg0;
                this.arg1 = arg1;
                this.action = action;
            }

            public void Invoke(V arg2, W arg3)
            {
                action.Invoke(arg0, arg1, arg2, arg3);
            }
        }

        public struct AppliedToFunc<V, W, TResult, TFunc>
            : IFunc<V, W, TResult>
            where V: struct
            where W: struct
            where TResult: struct
            where TFunc : struct, IFunc<T, U, V, W, TResult>
        {
            readonly T arg0;
            readonly U arg1;
            readonly ValueFunc<T, U, V, W, TResult>.Impl<TFunc> func;

            public AppliedToFunc(
                T arg0,
                U arg1,
                ValueFunc<T, U, V, W, TResult>.Impl<TFunc> func
            )
            {
                this.arg0 = arg0;
                this.arg1 = arg1;
                this.func = func;
            }

            public TResult Invoke(V arg2, W arg3)
            {
                return func.Invoke(arg0, arg1, arg2, arg3);
            }
        }


        public struct AppliedToAction<V, W, X, TAction>
            : IAction<V, W, X>
            where V: struct
            where W: struct
            where X: struct
            where TAction : struct, IAction<T, U, V, W, X>
        {
            readonly T arg0;
            readonly U arg1;
            readonly ValueAction<T, U, V, W, X>.Impl<TAction> action;

            public AppliedToAction(
                T arg0,
                U arg1,
                ValueAction<T, U, V, W, X>.Impl<TAction> action
                )
            {
                this.arg0 = arg0;
                this.arg1 = arg1;
                this.action = action;
            }

            public void Invoke(V arg2, W arg3, X arg4)
            {
                action.Invoke(arg0, arg1, arg2, arg3, arg4);
            }
        }

        public struct AppliedToFunc<V, W, X, TResult, TFunc>
            : IFunc<V, W, X, TResult>
            where V: struct
            where W: struct
            where X: struct
            where TResult: struct
            where TFunc : struct, IFunc<T, U, V, W, X, TResult>
        {
            readonly T arg0;
            readonly U arg1;
            readonly ValueFunc<T, U, V, W, X, TResult>.Impl<TFunc> func;

            public AppliedToFunc(
                T arg0,
                U arg1,
                ValueFunc<T, U, V, W, X, TResult>.Impl<TFunc> func
            )
            {
                this.arg0 = arg0;
                this.arg1 = arg1;
                this.func = func;
            }

            public TResult Invoke(V arg2, W arg3, X arg4)
            {
                return func.Invoke(arg0, arg1, arg2, arg3, arg4);
            }
        }


        public struct AppliedToAction<V, W, X, Y, TAction>
            : IAction<V, W, X, Y>
            where V: struct
            where W: struct
            where X: struct
            where Y: struct
            where TAction : struct, IAction<T, U, V, W, X, Y>
        {
            readonly T arg0;
            readonly U arg1;
            readonly ValueAction<T, U, V, W, X, Y>.Impl<TAction> action;

            public AppliedToAction(
                T arg0,
                U arg1,
                ValueAction<T, U, V, W, X, Y>.Impl<TAction> action
                )
            {
                this.arg0 = arg0;
                this.arg1 = arg1;
                this.action = action;
            }

            public void Invoke(V arg2, W arg3, X arg4, Y arg5)
            {
                action.Invoke(arg0, arg1, arg2, arg3, arg4, arg5);
            }
        }

        public struct AppliedToFunc<V, W, X, Y, TResult, TFunc>
            : IFunc<V, W, X, Y, TResult>
            where V: struct
            where W: struct
            where X: struct
            where Y: struct
            where TResult: struct
            where TFunc : struct, IFunc<T, U, V, W, X, Y, TResult>
        {
            readonly T arg0;
            readonly U arg1;
            readonly ValueFunc<T, U, V, W, X, Y, TResult>.Impl<TFunc> func;

            public AppliedToFunc(
                T arg0,
                U arg1,
                ValueFunc<T, U, V, W, X, Y, TResult>.Impl<TFunc> func
            )
            {
                this.arg0 = arg0;
                this.arg1 = arg1;
                this.func = func;
            }

            public TResult Invoke(V arg2, W arg3, X arg4, Y arg5)
            {
                return func.Invoke(arg0, arg1, arg2, arg3, arg4, arg5);
            }
        }


        public struct AppliedToAction<V, W, X, Y, Z, TAction>
            : IAction<V, W, X, Y, Z>
            where V: struct
            where W: struct
            where X: struct
            where Y: struct
            where Z: struct
            where TAction : struct, IAction<T, U, V, W, X, Y, Z>
        {
            readonly T arg0;
            readonly U arg1;
            readonly ValueAction<T, U, V, W, X, Y, Z>.Impl<TAction> action;

            public AppliedToAction(
                T arg0,
                U arg1,
                ValueAction<T, U, V, W, X, Y, Z>.Impl<TAction> action
                )
            {
                this.arg0 = arg0;
                this.arg1 = arg1;
                this.action = action;
            }

            public void Invoke(V arg2, W arg3, X arg4, Y arg5, Z arg6)
            {
                action.Invoke(arg0, arg1, arg2, arg3, arg4, arg5, arg6);
            }
        }

        public struct AppliedToFunc<V, W, X, Y, Z, TResult, TFunc>
            : IFunc<V, W, X, Y, Z, TResult>
            where V: struct
            where W: struct
            where X: struct
            where Y: struct
            where Z: struct
            where TResult: struct
            where TFunc : struct, IFunc<T, U, V, W, X, Y, Z, TResult>
        {
            readonly T arg0;
            readonly U arg1;
            readonly ValueFunc<T, U, V, W, X, Y, Z, TResult>.Impl<TFunc> func;

            public AppliedToFunc(
                T arg0,
                U arg1,
                ValueFunc<T, U, V, W, X, Y, Z, TResult>.Impl<TFunc> func
            )
            {
                this.arg0 = arg0;
                this.arg1 = arg1;
                this.func = func;
            }

            public TResult Invoke(V arg2, W arg3, X arg4, Y arg5, Z arg6)
            {
                return func.Invoke(arg0, arg1, arg2, arg3, arg4, arg5, arg6);
            }
        }


    }


    public struct Closure<T, U, V>
        where T: struct
        where U: struct
        where V: struct
    {

        public struct AppliedToAction<TAction>
            : IAction
            
            where TAction : struct, IAction<T, U, V>
        {
            readonly T arg0;
            readonly U arg1;
            readonly V arg2;
            readonly ValueAction<T, U, V>.Impl<TAction> action;

            public AppliedToAction(
                T arg0,
                U arg1,
                V arg2,
                ValueAction<T, U, V>.Impl<TAction> action
                )
            {
                this.arg0 = arg0;
                this.arg1 = arg1;
                this.arg2 = arg2;
                this.action = action;
            }

            public void Invoke()
            {
                action.Invoke(arg0, arg1, arg2);
            }
        }

        public struct AppliedToFunc<TResult, TFunc>
            : IFunc<TResult>
            where TResult: struct
            where TFunc : struct, IFunc<T, U, V, TResult>
        {
            readonly T arg0;
            readonly U arg1;
            readonly V arg2;
            readonly ValueFunc<T, U, V, TResult>.Impl<TFunc> func;

            public AppliedToFunc(
                T arg0,
                U arg1,
                V arg2,
                ValueFunc<T, U, V, TResult>.Impl<TFunc> func
            )
            {
                this.arg0 = arg0;
                this.arg1 = arg1;
                this.arg2 = arg2;
                this.func = func;
            }

            public TResult Invoke()
            {
                return func.Invoke(arg0, arg1, arg2);
            }
        }


        public struct AppliedToAction<W, TAction>
            : IAction<W>
            where W: struct
            where TAction : struct, IAction<T, U, V, W>
        {
            readonly T arg0;
            readonly U arg1;
            readonly V arg2;
            readonly ValueAction<T, U, V, W>.Impl<TAction> action;

            public AppliedToAction(
                T arg0,
                U arg1,
                V arg2,
                ValueAction<T, U, V, W>.Impl<TAction> action
                )
            {
                this.arg0 = arg0;
                this.arg1 = arg1;
                this.arg2 = arg2;
                this.action = action;
            }

            public void Invoke(W arg3)
            {
                action.Invoke(arg0, arg1, arg2, arg3);
            }
        }

        public struct AppliedToFunc<W, TResult, TFunc>
            : IFunc<W, TResult>
            where W: struct
            where TResult: struct
            where TFunc : struct, IFunc<T, U, V, W, TResult>
        {
            readonly T arg0;
            readonly U arg1;
            readonly V arg2;
            readonly ValueFunc<T, U, V, W, TResult>.Impl<TFunc> func;

            public AppliedToFunc(
                T arg0,
                U arg1,
                V arg2,
                ValueFunc<T, U, V, W, TResult>.Impl<TFunc> func
            )
            {
                this.arg0 = arg0;
                this.arg1 = arg1;
                this.arg2 = arg2;
                this.func = func;
            }

            public TResult Invoke(W arg3)
            {
                return func.Invoke(arg0, arg1, arg2, arg3);
            }
        }


        public struct AppliedToAction<W, X, TAction>
            : IAction<W, X>
            where W: struct
            where X: struct
            where TAction : struct, IAction<T, U, V, W, X>
        {
            readonly T arg0;
            readonly U arg1;
            readonly V arg2;
            readonly ValueAction<T, U, V, W, X>.Impl<TAction> action;

            public AppliedToAction(
                T arg0,
                U arg1,
                V arg2,
                ValueAction<T, U, V, W, X>.Impl<TAction> action
                )
            {
                this.arg0 = arg0;
                this.arg1 = arg1;
                this.arg2 = arg2;
                this.action = action;
            }

            public void Invoke(W arg3, X arg4)
            {
                action.Invoke(arg0, arg1, arg2, arg3, arg4);
            }
        }

        public struct AppliedToFunc<W, X, TResult, TFunc>
            : IFunc<W, X, TResult>
            where W: struct
            where X: struct
            where TResult: struct
            where TFunc : struct, IFunc<T, U, V, W, X, TResult>
        {
            readonly T arg0;
            readonly U arg1;
            readonly V arg2;
            readonly ValueFunc<T, U, V, W, X, TResult>.Impl<TFunc> func;

            public AppliedToFunc(
                T arg0,
                U arg1,
                V arg2,
                ValueFunc<T, U, V, W, X, TResult>.Impl<TFunc> func
            )
            {
                this.arg0 = arg0;
                this.arg1 = arg1;
                this.arg2 = arg2;
                this.func = func;
            }

            public TResult Invoke(W arg3, X arg4)
            {
                return func.Invoke(arg0, arg1, arg2, arg3, arg4);
            }
        }


        public struct AppliedToAction<W, X, Y, TAction>
            : IAction<W, X, Y>
            where W: struct
            where X: struct
            where Y: struct
            where TAction : struct, IAction<T, U, V, W, X, Y>
        {
            readonly T arg0;
            readonly U arg1;
            readonly V arg2;
            readonly ValueAction<T, U, V, W, X, Y>.Impl<TAction> action;

            public AppliedToAction(
                T arg0,
                U arg1,
                V arg2,
                ValueAction<T, U, V, W, X, Y>.Impl<TAction> action
                )
            {
                this.arg0 = arg0;
                this.arg1 = arg1;
                this.arg2 = arg2;
                this.action = action;
            }

            public void Invoke(W arg3, X arg4, Y arg5)
            {
                action.Invoke(arg0, arg1, arg2, arg3, arg4, arg5);
            }
        }

        public struct AppliedToFunc<W, X, Y, TResult, TFunc>
            : IFunc<W, X, Y, TResult>
            where W: struct
            where X: struct
            where Y: struct
            where TResult: struct
            where TFunc : struct, IFunc<T, U, V, W, X, Y, TResult>
        {
            readonly T arg0;
            readonly U arg1;
            readonly V arg2;
            readonly ValueFunc<T, U, V, W, X, Y, TResult>.Impl<TFunc> func;

            public AppliedToFunc(
                T arg0,
                U arg1,
                V arg2,
                ValueFunc<T, U, V, W, X, Y, TResult>.Impl<TFunc> func
            )
            {
                this.arg0 = arg0;
                this.arg1 = arg1;
                this.arg2 = arg2;
                this.func = func;
            }

            public TResult Invoke(W arg3, X arg4, Y arg5)
            {
                return func.Invoke(arg0, arg1, arg2, arg3, arg4, arg5);
            }
        }


        public struct AppliedToAction<W, X, Y, Z, TAction>
            : IAction<W, X, Y, Z>
            where W: struct
            where X: struct
            where Y: struct
            where Z: struct
            where TAction : struct, IAction<T, U, V, W, X, Y, Z>
        {
            readonly T arg0;
            readonly U arg1;
            readonly V arg2;
            readonly ValueAction<T, U, V, W, X, Y, Z>.Impl<TAction> action;

            public AppliedToAction(
                T arg0,
                U arg1,
                V arg2,
                ValueAction<T, U, V, W, X, Y, Z>.Impl<TAction> action
                )
            {
                this.arg0 = arg0;
                this.arg1 = arg1;
                this.arg2 = arg2;
                this.action = action;
            }

            public void Invoke(W arg3, X arg4, Y arg5, Z arg6)
            {
                action.Invoke(arg0, arg1, arg2, arg3, arg4, arg5, arg6);
            }
        }

        public struct AppliedToFunc<W, X, Y, Z, TResult, TFunc>
            : IFunc<W, X, Y, Z, TResult>
            where W: struct
            where X: struct
            where Y: struct
            where Z: struct
            where TResult: struct
            where TFunc : struct, IFunc<T, U, V, W, X, Y, Z, TResult>
        {
            readonly T arg0;
            readonly U arg1;
            readonly V arg2;
            readonly ValueFunc<T, U, V, W, X, Y, Z, TResult>.Impl<TFunc> func;

            public AppliedToFunc(
                T arg0,
                U arg1,
                V arg2,
                ValueFunc<T, U, V, W, X, Y, Z, TResult>.Impl<TFunc> func
            )
            {
                this.arg0 = arg0;
                this.arg1 = arg1;
                this.arg2 = arg2;
                this.func = func;
            }

            public TResult Invoke(W arg3, X arg4, Y arg5, Z arg6)
            {
                return func.Invoke(arg0, arg1, arg2, arg3, arg4, arg5, arg6);
            }
        }


    }


    public struct Closure<T, U, V, W>
        where T: struct
        where U: struct
        where V: struct
        where W: struct
    {

        public struct AppliedToAction<TAction>
            : IAction
            
            where TAction : struct, IAction<T, U, V, W>
        {
            readonly T arg0;
            readonly U arg1;
            readonly V arg2;
            readonly W arg3;
            readonly ValueAction<T, U, V, W>.Impl<TAction> action;

            public AppliedToAction(
                T arg0,
                U arg1,
                V arg2,
                W arg3,
                ValueAction<T, U, V, W>.Impl<TAction> action
                )
            {
                this.arg0 = arg0;
                this.arg1 = arg1;
                this.arg2 = arg2;
                this.arg3 = arg3;
                this.action = action;
            }

            public void Invoke()
            {
                action.Invoke(arg0, arg1, arg2, arg3);
            }
        }

        public struct AppliedToFunc<TResult, TFunc>
            : IFunc<TResult>
            where TResult: struct
            where TFunc : struct, IFunc<T, U, V, W, TResult>
        {
            readonly T arg0;
            readonly U arg1;
            readonly V arg2;
            readonly W arg3;
            readonly ValueFunc<T, U, V, W, TResult>.Impl<TFunc> func;

            public AppliedToFunc(
                T arg0,
                U arg1,
                V arg2,
                W arg3,
                ValueFunc<T, U, V, W, TResult>.Impl<TFunc> func
            )
            {
                this.arg0 = arg0;
                this.arg1 = arg1;
                this.arg2 = arg2;
                this.arg3 = arg3;
                this.func = func;
            }

            public TResult Invoke()
            {
                return func.Invoke(arg0, arg1, arg2, arg3);
            }
        }


        public struct AppliedToAction<X, TAction>
            : IAction<X>
            where X: struct
            where TAction : struct, IAction<T, U, V, W, X>
        {
            readonly T arg0;
            readonly U arg1;
            readonly V arg2;
            readonly W arg3;
            readonly ValueAction<T, U, V, W, X>.Impl<TAction> action;

            public AppliedToAction(
                T arg0,
                U arg1,
                V arg2,
                W arg3,
                ValueAction<T, U, V, W, X>.Impl<TAction> action
                )
            {
                this.arg0 = arg0;
                this.arg1 = arg1;
                this.arg2 = arg2;
                this.arg3 = arg3;
                this.action = action;
            }

            public void Invoke(X arg4)
            {
                action.Invoke(arg0, arg1, arg2, arg3, arg4);
            }
        }

        public struct AppliedToFunc<X, TResult, TFunc>
            : IFunc<X, TResult>
            where X: struct
            where TResult: struct
            where TFunc : struct, IFunc<T, U, V, W, X, TResult>
        {
            readonly T arg0;
            readonly U arg1;
            readonly V arg2;
            readonly W arg3;
            readonly ValueFunc<T, U, V, W, X, TResult>.Impl<TFunc> func;

            public AppliedToFunc(
                T arg0,
                U arg1,
                V arg2,
                W arg3,
                ValueFunc<T, U, V, W, X, TResult>.Impl<TFunc> func
            )
            {
                this.arg0 = arg0;
                this.arg1 = arg1;
                this.arg2 = arg2;
                this.arg3 = arg3;
                this.func = func;
            }

            public TResult Invoke(X arg4)
            {
                return func.Invoke(arg0, arg1, arg2, arg3, arg4);
            }
        }


        public struct AppliedToAction<X, Y, TAction>
            : IAction<X, Y>
            where X: struct
            where Y: struct
            where TAction : struct, IAction<T, U, V, W, X, Y>
        {
            readonly T arg0;
            readonly U arg1;
            readonly V arg2;
            readonly W arg3;
            readonly ValueAction<T, U, V, W, X, Y>.Impl<TAction> action;

            public AppliedToAction(
                T arg0,
                U arg1,
                V arg2,
                W arg3,
                ValueAction<T, U, V, W, X, Y>.Impl<TAction> action
                )
            {
                this.arg0 = arg0;
                this.arg1 = arg1;
                this.arg2 = arg2;
                this.arg3 = arg3;
                this.action = action;
            }

            public void Invoke(X arg4, Y arg5)
            {
                action.Invoke(arg0, arg1, arg2, arg3, arg4, arg5);
            }
        }

        public struct AppliedToFunc<X, Y, TResult, TFunc>
            : IFunc<X, Y, TResult>
            where X: struct
            where Y: struct
            where TResult: struct
            where TFunc : struct, IFunc<T, U, V, W, X, Y, TResult>
        {
            readonly T arg0;
            readonly U arg1;
            readonly V arg2;
            readonly W arg3;
            readonly ValueFunc<T, U, V, W, X, Y, TResult>.Impl<TFunc> func;

            public AppliedToFunc(
                T arg0,
                U arg1,
                V arg2,
                W arg3,
                ValueFunc<T, U, V, W, X, Y, TResult>.Impl<TFunc> func
            )
            {
                this.arg0 = arg0;
                this.arg1 = arg1;
                this.arg2 = arg2;
                this.arg3 = arg3;
                this.func = func;
            }

            public TResult Invoke(X arg4, Y arg5)
            {
                return func.Invoke(arg0, arg1, arg2, arg3, arg4, arg5);
            }
        }


        public struct AppliedToAction<X, Y, Z, TAction>
            : IAction<X, Y, Z>
            where X: struct
            where Y: struct
            where Z: struct
            where TAction : struct, IAction<T, U, V, W, X, Y, Z>
        {
            readonly T arg0;
            readonly U arg1;
            readonly V arg2;
            readonly W arg3;
            readonly ValueAction<T, U, V, W, X, Y, Z>.Impl<TAction> action;

            public AppliedToAction(
                T arg0,
                U arg1,
                V arg2,
                W arg3,
                ValueAction<T, U, V, W, X, Y, Z>.Impl<TAction> action
                )
            {
                this.arg0 = arg0;
                this.arg1 = arg1;
                this.arg2 = arg2;
                this.arg3 = arg3;
                this.action = action;
            }

            public void Invoke(X arg4, Y arg5, Z arg6)
            {
                action.Invoke(arg0, arg1, arg2, arg3, arg4, arg5, arg6);
            }
        }

        public struct AppliedToFunc<X, Y, Z, TResult, TFunc>
            : IFunc<X, Y, Z, TResult>
            where X: struct
            where Y: struct
            where Z: struct
            where TResult: struct
            where TFunc : struct, IFunc<T, U, V, W, X, Y, Z, TResult>
        {
            readonly T arg0;
            readonly U arg1;
            readonly V arg2;
            readonly W arg3;
            readonly ValueFunc<T, U, V, W, X, Y, Z, TResult>.Impl<TFunc> func;

            public AppliedToFunc(
                T arg0,
                U arg1,
                V arg2,
                W arg3,
                ValueFunc<T, U, V, W, X, Y, Z, TResult>.Impl<TFunc> func
            )
            {
                this.arg0 = arg0;
                this.arg1 = arg1;
                this.arg2 = arg2;
                this.arg3 = arg3;
                this.func = func;
            }

            public TResult Invoke(X arg4, Y arg5, Z arg6)
            {
                return func.Invoke(arg0, arg1, arg2, arg3, arg4, arg5, arg6);
            }
        }


    }


    public struct Closure<T, U, V, W, X>
        where T: struct
        where U: struct
        where V: struct
        where W: struct
        where X: struct
    {

        public struct AppliedToAction<TAction>
            : IAction
            
            where TAction : struct, IAction<T, U, V, W, X>
        {
            readonly T arg0;
            readonly U arg1;
            readonly V arg2;
            readonly W arg3;
            readonly X arg4;
            readonly ValueAction<T, U, V, W, X>.Impl<TAction> action;

            public AppliedToAction(
                T arg0,
                U arg1,
                V arg2,
                W arg3,
                X arg4,
                ValueAction<T, U, V, W, X>.Impl<TAction> action
                )
            {
                this.arg0 = arg0;
                this.arg1 = arg1;
                this.arg2 = arg2;
                this.arg3 = arg3;
                this.arg4 = arg4;
                this.action = action;
            }

            public void Invoke()
            {
                action.Invoke(arg0, arg1, arg2, arg3, arg4);
            }
        }

        public struct AppliedToFunc<TResult, TFunc>
            : IFunc<TResult>
            where TResult: struct
            where TFunc : struct, IFunc<T, U, V, W, X, TResult>
        {
            readonly T arg0;
            readonly U arg1;
            readonly V arg2;
            readonly W arg3;
            readonly X arg4;
            readonly ValueFunc<T, U, V, W, X, TResult>.Impl<TFunc> func;

            public AppliedToFunc(
                T arg0,
                U arg1,
                V arg2,
                W arg3,
                X arg4,
                ValueFunc<T, U, V, W, X, TResult>.Impl<TFunc> func
            )
            {
                this.arg0 = arg0;
                this.arg1 = arg1;
                this.arg2 = arg2;
                this.arg3 = arg3;
                this.arg4 = arg4;
                this.func = func;
            }

            public TResult Invoke()
            {
                return func.Invoke(arg0, arg1, arg2, arg3, arg4);
            }
        }


        public struct AppliedToAction<Y, TAction>
            : IAction<Y>
            where Y: struct
            where TAction : struct, IAction<T, U, V, W, X, Y>
        {
            readonly T arg0;
            readonly U arg1;
            readonly V arg2;
            readonly W arg3;
            readonly X arg4;
            readonly ValueAction<T, U, V, W, X, Y>.Impl<TAction> action;

            public AppliedToAction(
                T arg0,
                U arg1,
                V arg2,
                W arg3,
                X arg4,
                ValueAction<T, U, V, W, X, Y>.Impl<TAction> action
                )
            {
                this.arg0 = arg0;
                this.arg1 = arg1;
                this.arg2 = arg2;
                this.arg3 = arg3;
                this.arg4 = arg4;
                this.action = action;
            }

            public void Invoke(Y arg5)
            {
                action.Invoke(arg0, arg1, arg2, arg3, arg4, arg5);
            }
        }

        public struct AppliedToFunc<Y, TResult, TFunc>
            : IFunc<Y, TResult>
            where Y: struct
            where TResult: struct
            where TFunc : struct, IFunc<T, U, V, W, X, Y, TResult>
        {
            readonly T arg0;
            readonly U arg1;
            readonly V arg2;
            readonly W arg3;
            readonly X arg4;
            readonly ValueFunc<T, U, V, W, X, Y, TResult>.Impl<TFunc> func;

            public AppliedToFunc(
                T arg0,
                U arg1,
                V arg2,
                W arg3,
                X arg4,
                ValueFunc<T, U, V, W, X, Y, TResult>.Impl<TFunc> func
            )
            {
                this.arg0 = arg0;
                this.arg1 = arg1;
                this.arg2 = arg2;
                this.arg3 = arg3;
                this.arg4 = arg4;
                this.func = func;
            }

            public TResult Invoke(Y arg5)
            {
                return func.Invoke(arg0, arg1, arg2, arg3, arg4, arg5);
            }
        }


        public struct AppliedToAction<Y, Z, TAction>
            : IAction<Y, Z>
            where Y: struct
            where Z: struct
            where TAction : struct, IAction<T, U, V, W, X, Y, Z>
        {
            readonly T arg0;
            readonly U arg1;
            readonly V arg2;
            readonly W arg3;
            readonly X arg4;
            readonly ValueAction<T, U, V, W, X, Y, Z>.Impl<TAction> action;

            public AppliedToAction(
                T arg0,
                U arg1,
                V arg2,
                W arg3,
                X arg4,
                ValueAction<T, U, V, W, X, Y, Z>.Impl<TAction> action
                )
            {
                this.arg0 = arg0;
                this.arg1 = arg1;
                this.arg2 = arg2;
                this.arg3 = arg3;
                this.arg4 = arg4;
                this.action = action;
            }

            public void Invoke(Y arg5, Z arg6)
            {
                action.Invoke(arg0, arg1, arg2, arg3, arg4, arg5, arg6);
            }
        }

        public struct AppliedToFunc<Y, Z, TResult, TFunc>
            : IFunc<Y, Z, TResult>
            where Y: struct
            where Z: struct
            where TResult: struct
            where TFunc : struct, IFunc<T, U, V, W, X, Y, Z, TResult>
        {
            readonly T arg0;
            readonly U arg1;
            readonly V arg2;
            readonly W arg3;
            readonly X arg4;
            readonly ValueFunc<T, U, V, W, X, Y, Z, TResult>.Impl<TFunc> func;

            public AppliedToFunc(
                T arg0,
                U arg1,
                V arg2,
                W arg3,
                X arg4,
                ValueFunc<T, U, V, W, X, Y, Z, TResult>.Impl<TFunc> func
            )
            {
                this.arg0 = arg0;
                this.arg1 = arg1;
                this.arg2 = arg2;
                this.arg3 = arg3;
                this.arg4 = arg4;
                this.func = func;
            }

            public TResult Invoke(Y arg5, Z arg6)
            {
                return func.Invoke(arg0, arg1, arg2, arg3, arg4, arg5, arg6);
            }
        }


    }


    public struct Closure<T, U, V, W, X, Y>
        where T: struct
        where U: struct
        where V: struct
        where W: struct
        where X: struct
        where Y: struct
    {

        public struct AppliedToAction<TAction>
            : IAction
            
            where TAction : struct, IAction<T, U, V, W, X, Y>
        {
            readonly T arg0;
            readonly U arg1;
            readonly V arg2;
            readonly W arg3;
            readonly X arg4;
            readonly Y arg5;
            readonly ValueAction<T, U, V, W, X, Y>.Impl<TAction> action;

            public AppliedToAction(
                T arg0,
                U arg1,
                V arg2,
                W arg3,
                X arg4,
                Y arg5,
                ValueAction<T, U, V, W, X, Y>.Impl<TAction> action
                )
            {
                this.arg0 = arg0;
                this.arg1 = arg1;
                this.arg2 = arg2;
                this.arg3 = arg3;
                this.arg4 = arg4;
                this.arg5 = arg5;
                this.action = action;
            }

            public void Invoke()
            {
                action.Invoke(arg0, arg1, arg2, arg3, arg4, arg5);
            }
        }

        public struct AppliedToFunc<TResult, TFunc>
            : IFunc<TResult>
            where TResult: struct
            where TFunc : struct, IFunc<T, U, V, W, X, Y, TResult>
        {
            readonly T arg0;
            readonly U arg1;
            readonly V arg2;
            readonly W arg3;
            readonly X arg4;
            readonly Y arg5;
            readonly ValueFunc<T, U, V, W, X, Y, TResult>.Impl<TFunc> func;

            public AppliedToFunc(
                T arg0,
                U arg1,
                V arg2,
                W arg3,
                X arg4,
                Y arg5,
                ValueFunc<T, U, V, W, X, Y, TResult>.Impl<TFunc> func
            )
            {
                this.arg0 = arg0;
                this.arg1 = arg1;
                this.arg2 = arg2;
                this.arg3 = arg3;
                this.arg4 = arg4;
                this.arg5 = arg5;
                this.func = func;
            }

            public TResult Invoke()
            {
                return func.Invoke(arg0, arg1, arg2, arg3, arg4, arg5);
            }
        }


        public struct AppliedToAction<Z, TAction>
            : IAction<Z>
            where Z: struct
            where TAction : struct, IAction<T, U, V, W, X, Y, Z>
        {
            readonly T arg0;
            readonly U arg1;
            readonly V arg2;
            readonly W arg3;
            readonly X arg4;
            readonly Y arg5;
            readonly ValueAction<T, U, V, W, X, Y, Z>.Impl<TAction> action;

            public AppliedToAction(
                T arg0,
                U arg1,
                V arg2,
                W arg3,
                X arg4,
                Y arg5,
                ValueAction<T, U, V, W, X, Y, Z>.Impl<TAction> action
                )
            {
                this.arg0 = arg0;
                this.arg1 = arg1;
                this.arg2 = arg2;
                this.arg3 = arg3;
                this.arg4 = arg4;
                this.arg5 = arg5;
                this.action = action;
            }

            public void Invoke(Z arg6)
            {
                action.Invoke(arg0, arg1, arg2, arg3, arg4, arg5, arg6);
            }
        }

        public struct AppliedToFunc<Z, TResult, TFunc>
            : IFunc<Z, TResult>
            where Z: struct
            where TResult: struct
            where TFunc : struct, IFunc<T, U, V, W, X, Y, Z, TResult>
        {
            readonly T arg0;
            readonly U arg1;
            readonly V arg2;
            readonly W arg3;
            readonly X arg4;
            readonly Y arg5;
            readonly ValueFunc<T, U, V, W, X, Y, Z, TResult>.Impl<TFunc> func;

            public AppliedToFunc(
                T arg0,
                U arg1,
                V arg2,
                W arg3,
                X arg4,
                Y arg5,
                ValueFunc<T, U, V, W, X, Y, Z, TResult>.Impl<TFunc> func
            )
            {
                this.arg0 = arg0;
                this.arg1 = arg1;
                this.arg2 = arg2;
                this.arg3 = arg3;
                this.arg4 = arg4;
                this.arg5 = arg5;
                this.func = func;
            }

            public TResult Invoke(Z arg6)
            {
                return func.Invoke(arg0, arg1, arg2, arg3, arg4, arg5, arg6);
            }
        }


    }


    public struct Closure<T, U, V, W, X, Y, Z>
        where T: struct
        where U: struct
        where V: struct
        where W: struct
        where X: struct
        where Y: struct
        where Z: struct
    {

        public struct AppliedToAction<TAction>
            : IAction
            
            where TAction : struct, IAction<T, U, V, W, X, Y, Z>
        {
            readonly T arg0;
            readonly U arg1;
            readonly V arg2;
            readonly W arg3;
            readonly X arg4;
            readonly Y arg5;
            readonly Z arg6;
            readonly ValueAction<T, U, V, W, X, Y, Z>.Impl<TAction> action;

            public AppliedToAction(
                T arg0,
                U arg1,
                V arg2,
                W arg3,
                X arg4,
                Y arg5,
                Z arg6,
                ValueAction<T, U, V, W, X, Y, Z>.Impl<TAction> action
                )
            {
                this.arg0 = arg0;
                this.arg1 = arg1;
                this.arg2 = arg2;
                this.arg3 = arg3;
                this.arg4 = arg4;
                this.arg5 = arg5;
                this.arg6 = arg6;
                this.action = action;
            }

            public void Invoke()
            {
                action.Invoke(arg0, arg1, arg2, arg3, arg4, arg5, arg6);
            }
        }

        public struct AppliedToFunc<TResult, TFunc>
            : IFunc<TResult>
            where TResult: struct
            where TFunc : struct, IFunc<T, U, V, W, X, Y, Z, TResult>
        {
            readonly T arg0;
            readonly U arg1;
            readonly V arg2;
            readonly W arg3;
            readonly X arg4;
            readonly Y arg5;
            readonly Z arg6;
            readonly ValueFunc<T, U, V, W, X, Y, Z, TResult>.Impl<TFunc> func;

            public AppliedToFunc(
                T arg0,
                U arg1,
                V arg2,
                W arg3,
                X arg4,
                Y arg5,
                Z arg6,
                ValueFunc<T, U, V, W, X, Y, Z, TResult>.Impl<TFunc> func
            )
            {
                this.arg0 = arg0;
                this.arg1 = arg1;
                this.arg2 = arg2;
                this.arg3 = arg3;
                this.arg4 = arg4;
                this.arg5 = arg5;
                this.arg6 = arg6;
                this.func = func;
            }

            public TResult Invoke()
            {
                return func.Invoke(arg0, arg1, arg2, arg3, arg4, arg5, arg6);
            }
        }


    }


}
