//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
<#@ assembly name="System.Core" #><#@ import namespace="System.Linq" #><#@ output extension=".gen.cs" #>
using System.Runtime.CompilerServices;

namespace CareBoo.Burst.Delegates
{
<#
var GENERIC_PARAMS = new[]
{
    "T",
    "U",
    "V",
    "W",
    "X",
    "Y",
    "Z"
};

string GetGenericDefinition(System.Collections.Generic.IEnumerable<string> genericParams)
{
    if (genericParams.Count() < 1)
    {
        return "";
    }
    return $"<{string.Join(", ", genericParams)}>";
}

string GetGenericConstraint(System.Collections.Generic.IEnumerable<string> genericParams, int level)
{
    if (genericParams.Count() < 1)
    {
        return "";
    }
    var separator = "\n";
    for (var l = 0; l < level; l++)
    {
        separator += "    ";
    }
    return string.Join(separator, genericParams.Select(p => $"where {p}: struct"));
}

for (var i = 0; i < GENERIC_PARAMS.Length; i++)
{
    var closureGenericParams = GENERIC_PARAMS.Take(i + 1);
#>
    public struct Closure<#=GetGenericDefinition(closureGenericParams)#>
        <#=GetGenericConstraint(closureGenericParams, 2)#>
    {
<#
    for (var j = i; j < GENERIC_PARAMS.Length; j++)
    {
        var originalActionGenericParams = GENERIC_PARAMS.Take(j + 1);

        var appliedActionGenericParams = originalActionGenericParams.Skip(i + 1);

        var appliedToActionGenericParams = appliedActionGenericParams.Append("TAction");

        var originalFunctionGenericParams = originalActionGenericParams.Append("TResult");
        var appliedFunctionGenericParams = appliedActionGenericParams.Append("TResult");
#>
        public readonly struct AppliedToAction<#=GetGenericDefinition(appliedToActionGenericParams)#>
            : IAction<#=GetGenericDefinition(appliedActionGenericParams)#>
            <#=GetGenericConstraint(appliedActionGenericParams, 3)#>
            where TAction : struct, IAction<#=GetGenericDefinition(originalActionGenericParams)#>
        {
            <#=string.Join("\n            ", closureGenericParams.Select((t, n) => $"readonly {t} arg{n};"))#>
            readonly TAction action;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public AppliedToAction(
                <#=string.Join("\n                ", closureGenericParams.Select((t, n) => $"{t} arg{n},"))#>
                in ValueAction<#=GetGenericDefinition(originalActionGenericParams)#>.Impl<TAction> action
                )
            {
                <#=string.Join("\n                ", closureGenericParams.Select((t, n) => $"this.arg{n} = arg{n};"))#>
                this.action = action.Lambda;
            }

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public void Invoke(<#=string.Join(", ", appliedActionGenericParams.Select((t, n) => $"{t} arg{n + i + 1}"))#>)
            {
                action.Invoke(<#=string.Join(", ", originalActionGenericParams.Select((_, n) => $"arg{n}"))#>);
            }
        }

        public readonly struct AppliedToFunc<#=GetGenericDefinition(appliedFunctionGenericParams.Append("TFunc"))#>
            : IFunc<<#=string.Join(", ", appliedFunctionGenericParams)#>>
            <#=GetGenericConstraint(appliedFunctionGenericParams, 3)#>
            where TFunc : struct, IFunc<#=GetGenericDefinition(originalFunctionGenericParams)#>
        {
            <#=string.Join("\n            ", closureGenericParams.Select((t, n) => $"readonly {t} arg{n};"))#>
            readonly TFunc func;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public AppliedToFunc(
                <#=string.Join("\n                ", closureGenericParams.Select((t, n) => $"{t} arg{n},"))#>
                in ValueFunc<#=GetGenericDefinition(originalFunctionGenericParams)#>.Impl<TFunc> func
                )
            {
                <#=string.Join("\n                ", closureGenericParams.Select((t, n) => $"this.arg{n} = arg{n};"))#>
                this.func = func.Lambda;
            }

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public TResult Invoke(<#=string.Join(", ", appliedActionGenericParams.Select((t, n) => $"{t} arg{n + i + 1}"))#>)
            {
                return func.Invoke(<#=string.Join(", ", originalActionGenericParams.Select((_, n) => $"arg{n}"))#>);
            }
        }

<#
    }
#>
    }

<#
}
#>
}
