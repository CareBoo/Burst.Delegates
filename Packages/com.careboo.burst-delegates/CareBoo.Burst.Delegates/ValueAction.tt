//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ output extension=".gen.cs" #>

using Unity.Burst;
using System.Runtime.InteropServices;

namespace CareBoo.Burst.Delegates
{
<#
var GENERIC_PARAMS = new[]
{
    "",
    "T",
    "U",
    "V",
    "W",
    "X",
    "Y",
    "Z"
};

string GetGenericDefinition(System.Collections.Generic.IEnumerable<string> genericParams)
{
    if (genericParams.Count() < 1)
    {
        return "";
    }
    return $"<{string.Join(", ", genericParams)}>";
}

for (var i = 0; i < GENERIC_PARAMS.Length; i++)
{
    var GENERIC_CONSTRAINTS = "";
    for (var j = 1; j <= i; j++)
    {
        GENERIC_CONSTRAINTS += $"\n        where {GENERIC_PARAMS[j]} : struct";
    }

    var GENERIC_DEF = i > 0 ? $"<{string.Join(", ", GENERIC_PARAMS.Skip(1).Take(i))}>" : "";
    var GENERIC_ARGS_TYPED = string.Join(", ", GENERIC_PARAMS.Skip(1).Take(i).Select((t, n) => $"{t} arg{n}"));
    var GENERIC_ARGS = string.Join(", ", GENERIC_PARAMS.Skip(1).Take(i).Select((t, n) => $"arg{n}"));

#>
    public readonly struct ValueAction<#=GENERIC_DEF#><#=GENERIC_CONSTRAINTS#>
    {
        public readonly struct Impl<TLambda>
            where TLambda : struct, IAction<#=GENERIC_DEF#>
        {
            internal readonly TLambda lambda;

            public void Invoke(<#=GENERIC_ARGS_TYPED#>)
            {
                lambda.Invoke(<#=GENERIC_ARGS#>);
            }

            internal Impl(TLambda lambda)
            {
                this.lambda = lambda;
            }
<#
    for (var j = 1; j <= i; j++)
    {
        var closureGenericParams = GENERIC_PARAMS.Skip(1).Take(j);
        var appliedActionGenericParams = GENERIC_PARAMS.Skip(1).Take(i).Skip(j);
#>
            public ValueAction<#=GetGenericDefinition(appliedActionGenericParams)#>.Impl<Closure<#=GetGenericDefinition(closureGenericParams)#>.AppliedToAction<#=GetGenericDefinition(appliedActionGenericParams.Append("TLambda"))#>> Apply(
                <#=string.Join(",\n                ", closureGenericParams.Select((t, n) => $"{t} arg{n}"))#>
                )
            {
                var closure = new Closure<<#=string.Join(", ", closureGenericParams)#>>.AppliedToAction<<#=string.Join(", ", appliedActionGenericParams.Append("TLambda"))#>>(
                    <#=string.Join(",\n                    ", closureGenericParams.Select((t, n) => $"arg{n}"))#>,
                    this
                );
                return ValueAction<#=GetGenericDefinition(appliedActionGenericParams)#>.New(closure);
            }
<#
    }
#>
        }

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        public delegate void Delegate(<#=GENERIC_ARGS_TYPED#>);

        public static Impl<TLambda> New<TLambda>(TLambda lambda = default)
            where TLambda : struct, IAction<#=GENERIC_DEF#>
        {
            return new Impl<TLambda>(lambda);
        }

        public static Impl<BurstAction<#=GENERIC_DEF#>> Compile(Delegate action)
        {
            var ptr = BurstCompiler.CompileFunctionPointer(action);
            var burstAction = new BurstAction<#=GENERIC_DEF#>(ptr.Value);
            return New(burstAction);
        }
    }

<#
}
#>
}
