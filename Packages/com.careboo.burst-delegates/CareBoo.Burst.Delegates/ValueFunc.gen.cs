//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------




using Unity.Burst;
using System.Runtime.InteropServices;

namespace CareBoo.Burst.Delegates
{

    public readonly struct ValueFunc<TResult>
        where TResult : struct
    {
        public readonly struct Impl<TLambda>
            where TLambda : struct, IFunc<TResult>
        {
            internal readonly TLambda lambda;

            public TResult Invoke()
            {
                return lambda.Invoke();
            }

            internal Impl(TLambda lambda)
            {
                this.lambda = lambda;
            }

        }

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        public delegate TResult Delegate();

        public static Impl<TLambda> New<TLambda>(TLambda lambda = default)
            where TLambda : struct, IFunc<TResult>
        {
            return new Impl<TLambda>(lambda);
        }

        public static Impl<BurstFunc<TResult>> Compile(Delegate func)
        {
            var ptr = BurstCompiler.CompileFunctionPointer(func);
            var burstFunc = new BurstFunc<TResult>(ptr.Value);
            return New(burstFunc);
        }
    }


    public readonly struct ValueFunc<T, TResult>
        where T : struct
        where TResult : struct
    {
        public readonly struct Impl<TLambda>
            where TLambda : struct, IFunc<T, TResult>
        {
            internal readonly TLambda lambda;

            public TResult Invoke(T arg0)
            {
                return lambda.Invoke(arg0);
            }

            internal Impl(TLambda lambda)
            {
                this.lambda = lambda;
            }

            public ValueFunc<TResult>.Impl<Closure<T>.AppliedToFunc<TResult, TLambda>> Apply(
                T arg0
                )
            {
                var closure = new Closure<T>.AppliedToFunc<TResult, TLambda>(
                    arg0,
                    this
                );
                return ValueFunc<TResult>.New(closure);
            }

        }

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        public delegate TResult Delegate(T arg0);

        public static Impl<TLambda> New<TLambda>(TLambda lambda = default)
            where TLambda : struct, IFunc<T, TResult>
        {
            return new Impl<TLambda>(lambda);
        }

        public static Impl<BurstFunc<T, TResult>> Compile(Delegate func)
        {
            var ptr = BurstCompiler.CompileFunctionPointer(func);
            var burstFunc = new BurstFunc<T, TResult>(ptr.Value);
            return New(burstFunc);
        }
    }


    public readonly struct ValueFunc<T, U, TResult>
        where T : struct
        where U : struct
        where TResult : struct
    {
        public readonly struct Impl<TLambda>
            where TLambda : struct, IFunc<T, U, TResult>
        {
            internal readonly TLambda lambda;

            public TResult Invoke(T arg0, U arg1)
            {
                return lambda.Invoke(arg0, arg1);
            }

            internal Impl(TLambda lambda)
            {
                this.lambda = lambda;
            }

            public ValueFunc<U, TResult>.Impl<Closure<T>.AppliedToFunc<U, TResult, TLambda>> Apply(
                T arg0
                )
            {
                var closure = new Closure<T>.AppliedToFunc<U, TResult, TLambda>(
                    arg0,
                    this
                );
                return ValueFunc<U, TResult>.New(closure);
            }

            public ValueFunc<TResult>.Impl<Closure<T, U>.AppliedToFunc<TResult, TLambda>> Apply(
                T arg0,
                U arg1
                )
            {
                var closure = new Closure<T, U>.AppliedToFunc<TResult, TLambda>(
                    arg0,
                    arg1,
                    this
                );
                return ValueFunc<TResult>.New(closure);
            }

        }

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        public delegate TResult Delegate(T arg0, U arg1);

        public static Impl<TLambda> New<TLambda>(TLambda lambda = default)
            where TLambda : struct, IFunc<T, U, TResult>
        {
            return new Impl<TLambda>(lambda);
        }

        public static Impl<BurstFunc<T, U, TResult>> Compile(Delegate func)
        {
            var ptr = BurstCompiler.CompileFunctionPointer(func);
            var burstFunc = new BurstFunc<T, U, TResult>(ptr.Value);
            return New(burstFunc);
        }
    }


    public readonly struct ValueFunc<T, U, V, TResult>
        where T : struct
        where U : struct
        where V : struct
        where TResult : struct
    {
        public readonly struct Impl<TLambda>
            where TLambda : struct, IFunc<T, U, V, TResult>
        {
            internal readonly TLambda lambda;

            public TResult Invoke(T arg0, U arg1, V arg2)
            {
                return lambda.Invoke(arg0, arg1, arg2);
            }

            internal Impl(TLambda lambda)
            {
                this.lambda = lambda;
            }

            public ValueFunc<U, V, TResult>.Impl<Closure<T>.AppliedToFunc<U, V, TResult, TLambda>> Apply(
                T arg0
                )
            {
                var closure = new Closure<T>.AppliedToFunc<U, V, TResult, TLambda>(
                    arg0,
                    this
                );
                return ValueFunc<U, V, TResult>.New(closure);
            }

            public ValueFunc<V, TResult>.Impl<Closure<T, U>.AppliedToFunc<V, TResult, TLambda>> Apply(
                T arg0,
                U arg1
                )
            {
                var closure = new Closure<T, U>.AppliedToFunc<V, TResult, TLambda>(
                    arg0,
                    arg1,
                    this
                );
                return ValueFunc<V, TResult>.New(closure);
            }

            public ValueFunc<TResult>.Impl<Closure<T, U, V>.AppliedToFunc<TResult, TLambda>> Apply(
                T arg0,
                U arg1,
                V arg2
                )
            {
                var closure = new Closure<T, U, V>.AppliedToFunc<TResult, TLambda>(
                    arg0,
                    arg1,
                    arg2,
                    this
                );
                return ValueFunc<TResult>.New(closure);
            }

        }

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        public delegate TResult Delegate(T arg0, U arg1, V arg2);

        public static Impl<TLambda> New<TLambda>(TLambda lambda = default)
            where TLambda : struct, IFunc<T, U, V, TResult>
        {
            return new Impl<TLambda>(lambda);
        }

        public static Impl<BurstFunc<T, U, V, TResult>> Compile(Delegate func)
        {
            var ptr = BurstCompiler.CompileFunctionPointer(func);
            var burstFunc = new BurstFunc<T, U, V, TResult>(ptr.Value);
            return New(burstFunc);
        }
    }


    public readonly struct ValueFunc<T, U, V, W, TResult>
        where T : struct
        where U : struct
        where V : struct
        where W : struct
        where TResult : struct
    {
        public readonly struct Impl<TLambda>
            where TLambda : struct, IFunc<T, U, V, W, TResult>
        {
            internal readonly TLambda lambda;

            public TResult Invoke(T arg0, U arg1, V arg2, W arg3)
            {
                return lambda.Invoke(arg0, arg1, arg2, arg3);
            }

            internal Impl(TLambda lambda)
            {
                this.lambda = lambda;
            }

            public ValueFunc<U, V, W, TResult>.Impl<Closure<T>.AppliedToFunc<U, V, W, TResult, TLambda>> Apply(
                T arg0
                )
            {
                var closure = new Closure<T>.AppliedToFunc<U, V, W, TResult, TLambda>(
                    arg0,
                    this
                );
                return ValueFunc<U, V, W, TResult>.New(closure);
            }

            public ValueFunc<V, W, TResult>.Impl<Closure<T, U>.AppliedToFunc<V, W, TResult, TLambda>> Apply(
                T arg0,
                U arg1
                )
            {
                var closure = new Closure<T, U>.AppliedToFunc<V, W, TResult, TLambda>(
                    arg0,
                    arg1,
                    this
                );
                return ValueFunc<V, W, TResult>.New(closure);
            }

            public ValueFunc<W, TResult>.Impl<Closure<T, U, V>.AppliedToFunc<W, TResult, TLambda>> Apply(
                T arg0,
                U arg1,
                V arg2
                )
            {
                var closure = new Closure<T, U, V>.AppliedToFunc<W, TResult, TLambda>(
                    arg0,
                    arg1,
                    arg2,
                    this
                );
                return ValueFunc<W, TResult>.New(closure);
            }

            public ValueFunc<TResult>.Impl<Closure<T, U, V, W>.AppliedToFunc<TResult, TLambda>> Apply(
                T arg0,
                U arg1,
                V arg2,
                W arg3
                )
            {
                var closure = new Closure<T, U, V, W>.AppliedToFunc<TResult, TLambda>(
                    arg0,
                    arg1,
                    arg2,
                    arg3,
                    this
                );
                return ValueFunc<TResult>.New(closure);
            }

        }

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        public delegate TResult Delegate(T arg0, U arg1, V arg2, W arg3);

        public static Impl<TLambda> New<TLambda>(TLambda lambda = default)
            where TLambda : struct, IFunc<T, U, V, W, TResult>
        {
            return new Impl<TLambda>(lambda);
        }

        public static Impl<BurstFunc<T, U, V, W, TResult>> Compile(Delegate func)
        {
            var ptr = BurstCompiler.CompileFunctionPointer(func);
            var burstFunc = new BurstFunc<T, U, V, W, TResult>(ptr.Value);
            return New(burstFunc);
        }
    }


    public readonly struct ValueFunc<T, U, V, W, X, TResult>
        where T : struct
        where U : struct
        where V : struct
        where W : struct
        where X : struct
        where TResult : struct
    {
        public readonly struct Impl<TLambda>
            where TLambda : struct, IFunc<T, U, V, W, X, TResult>
        {
            internal readonly TLambda lambda;

            public TResult Invoke(T arg0, U arg1, V arg2, W arg3, X arg4)
            {
                return lambda.Invoke(arg0, arg1, arg2, arg3, arg4);
            }

            internal Impl(TLambda lambda)
            {
                this.lambda = lambda;
            }

            public ValueFunc<U, V, W, X, TResult>.Impl<Closure<T>.AppliedToFunc<U, V, W, X, TResult, TLambda>> Apply(
                T arg0
                )
            {
                var closure = new Closure<T>.AppliedToFunc<U, V, W, X, TResult, TLambda>(
                    arg0,
                    this
                );
                return ValueFunc<U, V, W, X, TResult>.New(closure);
            }

            public ValueFunc<V, W, X, TResult>.Impl<Closure<T, U>.AppliedToFunc<V, W, X, TResult, TLambda>> Apply(
                T arg0,
                U arg1
                )
            {
                var closure = new Closure<T, U>.AppliedToFunc<V, W, X, TResult, TLambda>(
                    arg0,
                    arg1,
                    this
                );
                return ValueFunc<V, W, X, TResult>.New(closure);
            }

            public ValueFunc<W, X, TResult>.Impl<Closure<T, U, V>.AppliedToFunc<W, X, TResult, TLambda>> Apply(
                T arg0,
                U arg1,
                V arg2
                )
            {
                var closure = new Closure<T, U, V>.AppliedToFunc<W, X, TResult, TLambda>(
                    arg0,
                    arg1,
                    arg2,
                    this
                );
                return ValueFunc<W, X, TResult>.New(closure);
            }

            public ValueFunc<X, TResult>.Impl<Closure<T, U, V, W>.AppliedToFunc<X, TResult, TLambda>> Apply(
                T arg0,
                U arg1,
                V arg2,
                W arg3
                )
            {
                var closure = new Closure<T, U, V, W>.AppliedToFunc<X, TResult, TLambda>(
                    arg0,
                    arg1,
                    arg2,
                    arg3,
                    this
                );
                return ValueFunc<X, TResult>.New(closure);
            }

            public ValueFunc<TResult>.Impl<Closure<T, U, V, W, X>.AppliedToFunc<TResult, TLambda>> Apply(
                T arg0,
                U arg1,
                V arg2,
                W arg3,
                X arg4
                )
            {
                var closure = new Closure<T, U, V, W, X>.AppliedToFunc<TResult, TLambda>(
                    arg0,
                    arg1,
                    arg2,
                    arg3,
                    arg4,
                    this
                );
                return ValueFunc<TResult>.New(closure);
            }

        }

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        public delegate TResult Delegate(T arg0, U arg1, V arg2, W arg3, X arg4);

        public static Impl<TLambda> New<TLambda>(TLambda lambda = default)
            where TLambda : struct, IFunc<T, U, V, W, X, TResult>
        {
            return new Impl<TLambda>(lambda);
        }

        public static Impl<BurstFunc<T, U, V, W, X, TResult>> Compile(Delegate func)
        {
            var ptr = BurstCompiler.CompileFunctionPointer(func);
            var burstFunc = new BurstFunc<T, U, V, W, X, TResult>(ptr.Value);
            return New(burstFunc);
        }
    }


    public readonly struct ValueFunc<T, U, V, W, X, Y, TResult>
        where T : struct
        where U : struct
        where V : struct
        where W : struct
        where X : struct
        where Y : struct
        where TResult : struct
    {
        public readonly struct Impl<TLambda>
            where TLambda : struct, IFunc<T, U, V, W, X, Y, TResult>
        {
            internal readonly TLambda lambda;

            public TResult Invoke(T arg0, U arg1, V arg2, W arg3, X arg4, Y arg5)
            {
                return lambda.Invoke(arg0, arg1, arg2, arg3, arg4, arg5);
            }

            internal Impl(TLambda lambda)
            {
                this.lambda = lambda;
            }

            public ValueFunc<U, V, W, X, Y, TResult>.Impl<Closure<T>.AppliedToFunc<U, V, W, X, Y, TResult, TLambda>> Apply(
                T arg0
                )
            {
                var closure = new Closure<T>.AppliedToFunc<U, V, W, X, Y, TResult, TLambda>(
                    arg0,
                    this
                );
                return ValueFunc<U, V, W, X, Y, TResult>.New(closure);
            }

            public ValueFunc<V, W, X, Y, TResult>.Impl<Closure<T, U>.AppliedToFunc<V, W, X, Y, TResult, TLambda>> Apply(
                T arg0,
                U arg1
                )
            {
                var closure = new Closure<T, U>.AppliedToFunc<V, W, X, Y, TResult, TLambda>(
                    arg0,
                    arg1,
                    this
                );
                return ValueFunc<V, W, X, Y, TResult>.New(closure);
            }

            public ValueFunc<W, X, Y, TResult>.Impl<Closure<T, U, V>.AppliedToFunc<W, X, Y, TResult, TLambda>> Apply(
                T arg0,
                U arg1,
                V arg2
                )
            {
                var closure = new Closure<T, U, V>.AppliedToFunc<W, X, Y, TResult, TLambda>(
                    arg0,
                    arg1,
                    arg2,
                    this
                );
                return ValueFunc<W, X, Y, TResult>.New(closure);
            }

            public ValueFunc<X, Y, TResult>.Impl<Closure<T, U, V, W>.AppliedToFunc<X, Y, TResult, TLambda>> Apply(
                T arg0,
                U arg1,
                V arg2,
                W arg3
                )
            {
                var closure = new Closure<T, U, V, W>.AppliedToFunc<X, Y, TResult, TLambda>(
                    arg0,
                    arg1,
                    arg2,
                    arg3,
                    this
                );
                return ValueFunc<X, Y, TResult>.New(closure);
            }

            public ValueFunc<Y, TResult>.Impl<Closure<T, U, V, W, X>.AppliedToFunc<Y, TResult, TLambda>> Apply(
                T arg0,
                U arg1,
                V arg2,
                W arg3,
                X arg4
                )
            {
                var closure = new Closure<T, U, V, W, X>.AppliedToFunc<Y, TResult, TLambda>(
                    arg0,
                    arg1,
                    arg2,
                    arg3,
                    arg4,
                    this
                );
                return ValueFunc<Y, TResult>.New(closure);
            }

            public ValueFunc<TResult>.Impl<Closure<T, U, V, W, X, Y>.AppliedToFunc<TResult, TLambda>> Apply(
                T arg0,
                U arg1,
                V arg2,
                W arg3,
                X arg4,
                Y arg5
                )
            {
                var closure = new Closure<T, U, V, W, X, Y>.AppliedToFunc<TResult, TLambda>(
                    arg0,
                    arg1,
                    arg2,
                    arg3,
                    arg4,
                    arg5,
                    this
                );
                return ValueFunc<TResult>.New(closure);
            }

        }

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        public delegate TResult Delegate(T arg0, U arg1, V arg2, W arg3, X arg4, Y arg5);

        public static Impl<TLambda> New<TLambda>(TLambda lambda = default)
            where TLambda : struct, IFunc<T, U, V, W, X, Y, TResult>
        {
            return new Impl<TLambda>(lambda);
        }

        public static Impl<BurstFunc<T, U, V, W, X, Y, TResult>> Compile(Delegate func)
        {
            var ptr = BurstCompiler.CompileFunctionPointer(func);
            var burstFunc = new BurstFunc<T, U, V, W, X, Y, TResult>(ptr.Value);
            return New(burstFunc);
        }
    }


    public readonly struct ValueFunc<T, U, V, W, X, Y, Z, TResult>
        where T : struct
        where U : struct
        where V : struct
        where W : struct
        where X : struct
        where Y : struct
        where Z : struct
        where TResult : struct
    {
        public readonly struct Impl<TLambda>
            where TLambda : struct, IFunc<T, U, V, W, X, Y, Z, TResult>
        {
            internal readonly TLambda lambda;

            public TResult Invoke(T arg0, U arg1, V arg2, W arg3, X arg4, Y arg5, Z arg6)
            {
                return lambda.Invoke(arg0, arg1, arg2, arg3, arg4, arg5, arg6);
            }

            internal Impl(TLambda lambda)
            {
                this.lambda = lambda;
            }

            public ValueFunc<U, V, W, X, Y, Z, TResult>.Impl<Closure<T>.AppliedToFunc<U, V, W, X, Y, Z, TResult, TLambda>> Apply(
                T arg0
                )
            {
                var closure = new Closure<T>.AppliedToFunc<U, V, W, X, Y, Z, TResult, TLambda>(
                    arg0,
                    this
                );
                return ValueFunc<U, V, W, X, Y, Z, TResult>.New(closure);
            }

            public ValueFunc<V, W, X, Y, Z, TResult>.Impl<Closure<T, U>.AppliedToFunc<V, W, X, Y, Z, TResult, TLambda>> Apply(
                T arg0,
                U arg1
                )
            {
                var closure = new Closure<T, U>.AppliedToFunc<V, W, X, Y, Z, TResult, TLambda>(
                    arg0,
                    arg1,
                    this
                );
                return ValueFunc<V, W, X, Y, Z, TResult>.New(closure);
            }

            public ValueFunc<W, X, Y, Z, TResult>.Impl<Closure<T, U, V>.AppliedToFunc<W, X, Y, Z, TResult, TLambda>> Apply(
                T arg0,
                U arg1,
                V arg2
                )
            {
                var closure = new Closure<T, U, V>.AppliedToFunc<W, X, Y, Z, TResult, TLambda>(
                    arg0,
                    arg1,
                    arg2,
                    this
                );
                return ValueFunc<W, X, Y, Z, TResult>.New(closure);
            }

            public ValueFunc<X, Y, Z, TResult>.Impl<Closure<T, U, V, W>.AppliedToFunc<X, Y, Z, TResult, TLambda>> Apply(
                T arg0,
                U arg1,
                V arg2,
                W arg3
                )
            {
                var closure = new Closure<T, U, V, W>.AppliedToFunc<X, Y, Z, TResult, TLambda>(
                    arg0,
                    arg1,
                    arg2,
                    arg3,
                    this
                );
                return ValueFunc<X, Y, Z, TResult>.New(closure);
            }

            public ValueFunc<Y, Z, TResult>.Impl<Closure<T, U, V, W, X>.AppliedToFunc<Y, Z, TResult, TLambda>> Apply(
                T arg0,
                U arg1,
                V arg2,
                W arg3,
                X arg4
                )
            {
                var closure = new Closure<T, U, V, W, X>.AppliedToFunc<Y, Z, TResult, TLambda>(
                    arg0,
                    arg1,
                    arg2,
                    arg3,
                    arg4,
                    this
                );
                return ValueFunc<Y, Z, TResult>.New(closure);
            }

            public ValueFunc<Z, TResult>.Impl<Closure<T, U, V, W, X, Y>.AppliedToFunc<Z, TResult, TLambda>> Apply(
                T arg0,
                U arg1,
                V arg2,
                W arg3,
                X arg4,
                Y arg5
                )
            {
                var closure = new Closure<T, U, V, W, X, Y>.AppliedToFunc<Z, TResult, TLambda>(
                    arg0,
                    arg1,
                    arg2,
                    arg3,
                    arg4,
                    arg5,
                    this
                );
                return ValueFunc<Z, TResult>.New(closure);
            }

            public ValueFunc<TResult>.Impl<Closure<T, U, V, W, X, Y, Z>.AppliedToFunc<TResult, TLambda>> Apply(
                T arg0,
                U arg1,
                V arg2,
                W arg3,
                X arg4,
                Y arg5,
                Z arg6
                )
            {
                var closure = new Closure<T, U, V, W, X, Y, Z>.AppliedToFunc<TResult, TLambda>(
                    arg0,
                    arg1,
                    arg2,
                    arg3,
                    arg4,
                    arg5,
                    arg6,
                    this
                );
                return ValueFunc<TResult>.New(closure);
            }

        }

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        public delegate TResult Delegate(T arg0, U arg1, V arg2, W arg3, X arg4, Y arg5, Z arg6);

        public static Impl<TLambda> New<TLambda>(TLambda lambda = default)
            where TLambda : struct, IFunc<T, U, V, W, X, Y, Z, TResult>
        {
            return new Impl<TLambda>(lambda);
        }

        public static Impl<BurstFunc<T, U, V, W, X, Y, Z, TResult>> Compile(Delegate func)
        {
            var ptr = BurstCompiler.CompileFunctionPointer(func);
            var burstFunc = new BurstFunc<T, U, V, W, X, Y, Z, TResult>(ptr.Value);
            return New(burstFunc);
        }
    }


}
