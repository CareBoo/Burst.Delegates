//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System.Runtime.CompilerServices;

namespace CareBoo.Burst.Delegates
{

    public struct ValueAction
    {
        public readonly ref struct Impl<TLambda>
            where TLambda : struct, IAction
        {
            public readonly TLambda Lambda;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public void Invoke()
            {
                Lambda.Invoke();
            }

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            internal Impl(TLambda Lambda)
            {
                this.Lambda = Lambda;
            }

        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Impl<TLambda> New<TLambda>(TLambda Lambda = default)
            where TLambda : struct, IAction
        {
            return new Impl<TLambda>(Lambda);
        }
    }


    public struct ValueAction<T>
        where T : struct
    {
        public readonly ref struct Impl<TLambda>
            where TLambda : struct, IAction<T>
        {
            public readonly TLambda Lambda;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public void Invoke(T arg0)
            {
                Lambda.Invoke(arg0);
            }

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            internal Impl(TLambda Lambda)
            {
                this.Lambda = Lambda;
            }

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public ValueAction.Impl<Closure<T>.AppliedToAction<TLambda>> PartialInvoke(
                T arg0
                )
            {
                var closure = new Closure<T>.AppliedToAction<TLambda>(
                    arg0,
                    in this
                );
                return ValueAction.New(closure);
            }

        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Impl<TLambda> New<TLambda>(TLambda Lambda = default)
            where TLambda : struct, IAction<T>
        {
            return new Impl<TLambda>(Lambda);
        }
    }


    public struct ValueAction<T, U>
        where T : struct
        where U : struct
    {
        public readonly ref struct Impl<TLambda>
            where TLambda : struct, IAction<T, U>
        {
            public readonly TLambda Lambda;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public void Invoke(T arg0, U arg1)
            {
                Lambda.Invoke(arg0, arg1);
            }

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            internal Impl(TLambda Lambda)
            {
                this.Lambda = Lambda;
            }

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public ValueAction<U>.Impl<Closure<T>.AppliedToAction<U, TLambda>> PartialInvoke(
                T arg0
                )
            {
                var closure = new Closure<T>.AppliedToAction<U, TLambda>(
                    arg0,
                    in this
                );
                return ValueAction<U>.New(closure);
            }

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public ValueAction.Impl<Closure<T, U>.AppliedToAction<TLambda>> PartialInvoke(
                T arg0,
                U arg1
                )
            {
                var closure = new Closure<T, U>.AppliedToAction<TLambda>(
                    arg0,
                    arg1,
                    in this
                );
                return ValueAction.New(closure);
            }

        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Impl<TLambda> New<TLambda>(TLambda Lambda = default)
            where TLambda : struct, IAction<T, U>
        {
            return new Impl<TLambda>(Lambda);
        }
    }


    public struct ValueAction<T, U, V>
        where T : struct
        where U : struct
        where V : struct
    {
        public readonly ref struct Impl<TLambda>
            where TLambda : struct, IAction<T, U, V>
        {
            public readonly TLambda Lambda;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public void Invoke(T arg0, U arg1, V arg2)
            {
                Lambda.Invoke(arg0, arg1, arg2);
            }

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            internal Impl(TLambda Lambda)
            {
                this.Lambda = Lambda;
            }

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public ValueAction<U, V>.Impl<Closure<T>.AppliedToAction<U, V, TLambda>> PartialInvoke(
                T arg0
                )
            {
                var closure = new Closure<T>.AppliedToAction<U, V, TLambda>(
                    arg0,
                    in this
                );
                return ValueAction<U, V>.New(closure);
            }

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public ValueAction<V>.Impl<Closure<T, U>.AppliedToAction<V, TLambda>> PartialInvoke(
                T arg0,
                U arg1
                )
            {
                var closure = new Closure<T, U>.AppliedToAction<V, TLambda>(
                    arg0,
                    arg1,
                    in this
                );
                return ValueAction<V>.New(closure);
            }

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public ValueAction.Impl<Closure<T, U, V>.AppliedToAction<TLambda>> PartialInvoke(
                T arg0,
                U arg1,
                V arg2
                )
            {
                var closure = new Closure<T, U, V>.AppliedToAction<TLambda>(
                    arg0,
                    arg1,
                    arg2,
                    in this
                );
                return ValueAction.New(closure);
            }

        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Impl<TLambda> New<TLambda>(TLambda Lambda = default)
            where TLambda : struct, IAction<T, U, V>
        {
            return new Impl<TLambda>(Lambda);
        }
    }


    public struct ValueAction<T, U, V, W>
        where T : struct
        where U : struct
        where V : struct
        where W : struct
    {
        public readonly ref struct Impl<TLambda>
            where TLambda : struct, IAction<T, U, V, W>
        {
            public readonly TLambda Lambda;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public void Invoke(T arg0, U arg1, V arg2, W arg3)
            {
                Lambda.Invoke(arg0, arg1, arg2, arg3);
            }

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            internal Impl(TLambda Lambda)
            {
                this.Lambda = Lambda;
            }

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public ValueAction<U, V, W>.Impl<Closure<T>.AppliedToAction<U, V, W, TLambda>> PartialInvoke(
                T arg0
                )
            {
                var closure = new Closure<T>.AppliedToAction<U, V, W, TLambda>(
                    arg0,
                    in this
                );
                return ValueAction<U, V, W>.New(closure);
            }

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public ValueAction<V, W>.Impl<Closure<T, U>.AppliedToAction<V, W, TLambda>> PartialInvoke(
                T arg0,
                U arg1
                )
            {
                var closure = new Closure<T, U>.AppliedToAction<V, W, TLambda>(
                    arg0,
                    arg1,
                    in this
                );
                return ValueAction<V, W>.New(closure);
            }

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public ValueAction<W>.Impl<Closure<T, U, V>.AppliedToAction<W, TLambda>> PartialInvoke(
                T arg0,
                U arg1,
                V arg2
                )
            {
                var closure = new Closure<T, U, V>.AppliedToAction<W, TLambda>(
                    arg0,
                    arg1,
                    arg2,
                    in this
                );
                return ValueAction<W>.New(closure);
            }

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public ValueAction.Impl<Closure<T, U, V, W>.AppliedToAction<TLambda>> PartialInvoke(
                T arg0,
                U arg1,
                V arg2,
                W arg3
                )
            {
                var closure = new Closure<T, U, V, W>.AppliedToAction<TLambda>(
                    arg0,
                    arg1,
                    arg2,
                    arg3,
                    in this
                );
                return ValueAction.New(closure);
            }

        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Impl<TLambda> New<TLambda>(TLambda Lambda = default)
            where TLambda : struct, IAction<T, U, V, W>
        {
            return new Impl<TLambda>(Lambda);
        }
    }


    public struct ValueAction<T, U, V, W, X>
        where T : struct
        where U : struct
        where V : struct
        where W : struct
        where X : struct
    {
        public readonly ref struct Impl<TLambda>
            where TLambda : struct, IAction<T, U, V, W, X>
        {
            public readonly TLambda Lambda;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public void Invoke(T arg0, U arg1, V arg2, W arg3, X arg4)
            {
                Lambda.Invoke(arg0, arg1, arg2, arg3, arg4);
            }

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            internal Impl(TLambda Lambda)
            {
                this.Lambda = Lambda;
            }

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public ValueAction<U, V, W, X>.Impl<Closure<T>.AppliedToAction<U, V, W, X, TLambda>> PartialInvoke(
                T arg0
                )
            {
                var closure = new Closure<T>.AppliedToAction<U, V, W, X, TLambda>(
                    arg0,
                    in this
                );
                return ValueAction<U, V, W, X>.New(closure);
            }

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public ValueAction<V, W, X>.Impl<Closure<T, U>.AppliedToAction<V, W, X, TLambda>> PartialInvoke(
                T arg0,
                U arg1
                )
            {
                var closure = new Closure<T, U>.AppliedToAction<V, W, X, TLambda>(
                    arg0,
                    arg1,
                    in this
                );
                return ValueAction<V, W, X>.New(closure);
            }

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public ValueAction<W, X>.Impl<Closure<T, U, V>.AppliedToAction<W, X, TLambda>> PartialInvoke(
                T arg0,
                U arg1,
                V arg2
                )
            {
                var closure = new Closure<T, U, V>.AppliedToAction<W, X, TLambda>(
                    arg0,
                    arg1,
                    arg2,
                    in this
                );
                return ValueAction<W, X>.New(closure);
            }

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public ValueAction<X>.Impl<Closure<T, U, V, W>.AppliedToAction<X, TLambda>> PartialInvoke(
                T arg0,
                U arg1,
                V arg2,
                W arg3
                )
            {
                var closure = new Closure<T, U, V, W>.AppliedToAction<X, TLambda>(
                    arg0,
                    arg1,
                    arg2,
                    arg3,
                    in this
                );
                return ValueAction<X>.New(closure);
            }

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public ValueAction.Impl<Closure<T, U, V, W, X>.AppliedToAction<TLambda>> PartialInvoke(
                T arg0,
                U arg1,
                V arg2,
                W arg3,
                X arg4
                )
            {
                var closure = new Closure<T, U, V, W, X>.AppliedToAction<TLambda>(
                    arg0,
                    arg1,
                    arg2,
                    arg3,
                    arg4,
                    in this
                );
                return ValueAction.New(closure);
            }

        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Impl<TLambda> New<TLambda>(TLambda Lambda = default)
            where TLambda : struct, IAction<T, U, V, W, X>
        {
            return new Impl<TLambda>(Lambda);
        }
    }


    public struct ValueAction<T, U, V, W, X, Y>
        where T : struct
        where U : struct
        where V : struct
        where W : struct
        where X : struct
        where Y : struct
    {
        public readonly ref struct Impl<TLambda>
            where TLambda : struct, IAction<T, U, V, W, X, Y>
        {
            public readonly TLambda Lambda;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public void Invoke(T arg0, U arg1, V arg2, W arg3, X arg4, Y arg5)
            {
                Lambda.Invoke(arg0, arg1, arg2, arg3, arg4, arg5);
            }

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            internal Impl(TLambda Lambda)
            {
                this.Lambda = Lambda;
            }

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public ValueAction<U, V, W, X, Y>.Impl<Closure<T>.AppliedToAction<U, V, W, X, Y, TLambda>> PartialInvoke(
                T arg0
                )
            {
                var closure = new Closure<T>.AppliedToAction<U, V, W, X, Y, TLambda>(
                    arg0,
                    in this
                );
                return ValueAction<U, V, W, X, Y>.New(closure);
            }

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public ValueAction<V, W, X, Y>.Impl<Closure<T, U>.AppliedToAction<V, W, X, Y, TLambda>> PartialInvoke(
                T arg0,
                U arg1
                )
            {
                var closure = new Closure<T, U>.AppliedToAction<V, W, X, Y, TLambda>(
                    arg0,
                    arg1,
                    in this
                );
                return ValueAction<V, W, X, Y>.New(closure);
            }

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public ValueAction<W, X, Y>.Impl<Closure<T, U, V>.AppliedToAction<W, X, Y, TLambda>> PartialInvoke(
                T arg0,
                U arg1,
                V arg2
                )
            {
                var closure = new Closure<T, U, V>.AppliedToAction<W, X, Y, TLambda>(
                    arg0,
                    arg1,
                    arg2,
                    in this
                );
                return ValueAction<W, X, Y>.New(closure);
            }

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public ValueAction<X, Y>.Impl<Closure<T, U, V, W>.AppliedToAction<X, Y, TLambda>> PartialInvoke(
                T arg0,
                U arg1,
                V arg2,
                W arg3
                )
            {
                var closure = new Closure<T, U, V, W>.AppliedToAction<X, Y, TLambda>(
                    arg0,
                    arg1,
                    arg2,
                    arg3,
                    in this
                );
                return ValueAction<X, Y>.New(closure);
            }

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public ValueAction<Y>.Impl<Closure<T, U, V, W, X>.AppliedToAction<Y, TLambda>> PartialInvoke(
                T arg0,
                U arg1,
                V arg2,
                W arg3,
                X arg4
                )
            {
                var closure = new Closure<T, U, V, W, X>.AppliedToAction<Y, TLambda>(
                    arg0,
                    arg1,
                    arg2,
                    arg3,
                    arg4,
                    in this
                );
                return ValueAction<Y>.New(closure);
            }

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public ValueAction.Impl<Closure<T, U, V, W, X, Y>.AppliedToAction<TLambda>> PartialInvoke(
                T arg0,
                U arg1,
                V arg2,
                W arg3,
                X arg4,
                Y arg5
                )
            {
                var closure = new Closure<T, U, V, W, X, Y>.AppliedToAction<TLambda>(
                    arg0,
                    arg1,
                    arg2,
                    arg3,
                    arg4,
                    arg5,
                    in this
                );
                return ValueAction.New(closure);
            }

        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Impl<TLambda> New<TLambda>(TLambda Lambda = default)
            where TLambda : struct, IAction<T, U, V, W, X, Y>
        {
            return new Impl<TLambda>(Lambda);
        }
    }


    public struct ValueAction<T, U, V, W, X, Y, Z>
        where T : struct
        where U : struct
        where V : struct
        where W : struct
        where X : struct
        where Y : struct
        where Z : struct
    {
        public readonly ref struct Impl<TLambda>
            where TLambda : struct, IAction<T, U, V, W, X, Y, Z>
        {
            public readonly TLambda Lambda;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public void Invoke(T arg0, U arg1, V arg2, W arg3, X arg4, Y arg5, Z arg6)
            {
                Lambda.Invoke(arg0, arg1, arg2, arg3, arg4, arg5, arg6);
            }

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            internal Impl(TLambda Lambda)
            {
                this.Lambda = Lambda;
            }

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public ValueAction<U, V, W, X, Y, Z>.Impl<Closure<T>.AppliedToAction<U, V, W, X, Y, Z, TLambda>> PartialInvoke(
                T arg0
                )
            {
                var closure = new Closure<T>.AppliedToAction<U, V, W, X, Y, Z, TLambda>(
                    arg0,
                    in this
                );
                return ValueAction<U, V, W, X, Y, Z>.New(closure);
            }

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public ValueAction<V, W, X, Y, Z>.Impl<Closure<T, U>.AppliedToAction<V, W, X, Y, Z, TLambda>> PartialInvoke(
                T arg0,
                U arg1
                )
            {
                var closure = new Closure<T, U>.AppliedToAction<V, W, X, Y, Z, TLambda>(
                    arg0,
                    arg1,
                    in this
                );
                return ValueAction<V, W, X, Y, Z>.New(closure);
            }

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public ValueAction<W, X, Y, Z>.Impl<Closure<T, U, V>.AppliedToAction<W, X, Y, Z, TLambda>> PartialInvoke(
                T arg0,
                U arg1,
                V arg2
                )
            {
                var closure = new Closure<T, U, V>.AppliedToAction<W, X, Y, Z, TLambda>(
                    arg0,
                    arg1,
                    arg2,
                    in this
                );
                return ValueAction<W, X, Y, Z>.New(closure);
            }

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public ValueAction<X, Y, Z>.Impl<Closure<T, U, V, W>.AppliedToAction<X, Y, Z, TLambda>> PartialInvoke(
                T arg0,
                U arg1,
                V arg2,
                W arg3
                )
            {
                var closure = new Closure<T, U, V, W>.AppliedToAction<X, Y, Z, TLambda>(
                    arg0,
                    arg1,
                    arg2,
                    arg3,
                    in this
                );
                return ValueAction<X, Y, Z>.New(closure);
            }

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public ValueAction<Y, Z>.Impl<Closure<T, U, V, W, X>.AppliedToAction<Y, Z, TLambda>> PartialInvoke(
                T arg0,
                U arg1,
                V arg2,
                W arg3,
                X arg4
                )
            {
                var closure = new Closure<T, U, V, W, X>.AppliedToAction<Y, Z, TLambda>(
                    arg0,
                    arg1,
                    arg2,
                    arg3,
                    arg4,
                    in this
                );
                return ValueAction<Y, Z>.New(closure);
            }

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public ValueAction<Z>.Impl<Closure<T, U, V, W, X, Y>.AppliedToAction<Z, TLambda>> PartialInvoke(
                T arg0,
                U arg1,
                V arg2,
                W arg3,
                X arg4,
                Y arg5
                )
            {
                var closure = new Closure<T, U, V, W, X, Y>.AppliedToAction<Z, TLambda>(
                    arg0,
                    arg1,
                    arg2,
                    arg3,
                    arg4,
                    arg5,
                    in this
                );
                return ValueAction<Z>.New(closure);
            }

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public ValueAction.Impl<Closure<T, U, V, W, X, Y, Z>.AppliedToAction<TLambda>> PartialInvoke(
                T arg0,
                U arg1,
                V arg2,
                W arg3,
                X arg4,
                Y arg5,
                Z arg6
                )
            {
                var closure = new Closure<T, U, V, W, X, Y, Z>.AppliedToAction<TLambda>(
                    arg0,
                    arg1,
                    arg2,
                    arg3,
                    arg4,
                    arg5,
                    arg6,
                    in this
                );
                return ValueAction.New(closure);
            }

        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Impl<TLambda> New<TLambda>(TLambda Lambda = default)
            where TLambda : struct, IAction<T, U, V, W, X, Y, Z>
        {
            return new Impl<TLambda>(Lambda);
        }
    }


}
