//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------




using Unity.Collections.LowLevel.Unsafe;
using Unity.Burst;
using System;
using System.Runtime.InteropServices;

namespace CareBoo.Burst.Delegates
{

    public unsafe readonly struct BurstAction : IAction
    {
        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        public delegate void Delegate();

#if !UNITY_DOTSPLAYER
        [NativeDisableUnsafePtrRestriction]
#endif
        readonly IntPtr _ptr;

        internal BurstAction(IntPtr ptr) => _ptr = ptr;

        public void Invoke()
        {
            bool isBurst = false;
            Unity.Burst.CompilerServices.Hint.Assume(isBurst);
            if (!isBurst)
            {
                Invoke_Dotnet();
                return;
            }
            Invoke_Burst();
        }

        void Invoke_Burst()
        {
            new FunctionPointer<Action>(_ptr).Invoke();
        }

        [BurstDiscard]
        void Invoke_Dotnet()
        {
            ((delegate* unmanaged[Cdecl]<void>)_ptr)();
        }
    }

    public unsafe readonly struct BurstAction<T> : IAction<T>
        where T : struct
    {
        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        public delegate void Delegate(T arg0);

#if !UNITY_DOTSPLAYER
        [NativeDisableUnsafePtrRestriction]
#endif
        readonly IntPtr _ptr;

        internal BurstAction(IntPtr ptr) => _ptr = ptr;

        public void Invoke(T arg0)
        {
            bool isBurst = false;
            Unity.Burst.CompilerServices.Hint.Assume(isBurst);
            if (!isBurst)
            {
                Invoke_Dotnet(arg0);
                return;
            }
            Invoke_Burst(arg0);
        }

        void Invoke_Burst(T arg0)
        {
            new FunctionPointer<Action<T>>(_ptr).Invoke(arg0);
        }

        [BurstDiscard]
        void Invoke_Dotnet(T arg0)
        {
            ((delegate* unmanaged[Cdecl]<T, void>)_ptr)(arg0);
        }
    }

    public unsafe readonly struct BurstAction<T, U> : IAction<T, U>
        where T : struct
        where U : struct
    {
        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        public delegate void Delegate(T arg0, U arg1);

#if !UNITY_DOTSPLAYER
        [NativeDisableUnsafePtrRestriction]
#endif
        readonly IntPtr _ptr;

        internal BurstAction(IntPtr ptr) => _ptr = ptr;

        public void Invoke(T arg0, U arg1)
        {
            bool isBurst = false;
            Unity.Burst.CompilerServices.Hint.Assume(isBurst);
            if (!isBurst)
            {
                Invoke_Dotnet(arg0, arg1);
                return;
            }
            Invoke_Burst(arg0, arg1);
        }

        void Invoke_Burst(T arg0, U arg1)
        {
            new FunctionPointer<Action<T, U>>(_ptr).Invoke(arg0, arg1);
        }

        [BurstDiscard]
        void Invoke_Dotnet(T arg0, U arg1)
        {
            ((delegate* unmanaged[Cdecl]<T, U, void>)_ptr)(arg0, arg1);
        }
    }

    public unsafe readonly struct BurstAction<T, U, V> : IAction<T, U, V>
        where T : struct
        where U : struct
        where V : struct
    {
        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        public delegate void Delegate(T arg0, U arg1, V arg2);

#if !UNITY_DOTSPLAYER
        [NativeDisableUnsafePtrRestriction]
#endif
        readonly IntPtr _ptr;

        internal BurstAction(IntPtr ptr) => _ptr = ptr;

        public void Invoke(T arg0, U arg1, V arg2)
        {
            bool isBurst = false;
            Unity.Burst.CompilerServices.Hint.Assume(isBurst);
            if (!isBurst)
            {
                Invoke_Dotnet(arg0, arg1, arg2);
                return;
            }
            Invoke_Burst(arg0, arg1, arg2);
        }

        void Invoke_Burst(T arg0, U arg1, V arg2)
        {
            new FunctionPointer<Action<T, U, V>>(_ptr).Invoke(arg0, arg1, arg2);
        }

        [BurstDiscard]
        void Invoke_Dotnet(T arg0, U arg1, V arg2)
        {
            ((delegate* unmanaged[Cdecl]<T, U, V, void>)_ptr)(arg0, arg1, arg2);
        }
    }

    public unsafe readonly struct BurstAction<T, U, V, W> : IAction<T, U, V, W>
        where T : struct
        where U : struct
        where V : struct
        where W : struct
    {
        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        public delegate void Delegate(T arg0, U arg1, V arg2, W arg3);

#if !UNITY_DOTSPLAYER
        [NativeDisableUnsafePtrRestriction]
#endif
        readonly IntPtr _ptr;

        internal BurstAction(IntPtr ptr) => _ptr = ptr;

        public void Invoke(T arg0, U arg1, V arg2, W arg3)
        {
            bool isBurst = false;
            Unity.Burst.CompilerServices.Hint.Assume(isBurst);
            if (!isBurst)
            {
                Invoke_Dotnet(arg0, arg1, arg2, arg3);
                return;
            }
            Invoke_Burst(arg0, arg1, arg2, arg3);
        }

        void Invoke_Burst(T arg0, U arg1, V arg2, W arg3)
        {
            new FunctionPointer<Action<T, U, V, W>>(_ptr).Invoke(arg0, arg1, arg2, arg3);
        }

        [BurstDiscard]
        void Invoke_Dotnet(T arg0, U arg1, V arg2, W arg3)
        {
            ((delegate* unmanaged[Cdecl]<T, U, V, W, void>)_ptr)(arg0, arg1, arg2, arg3);
        }
    }

    public unsafe readonly struct BurstAction<T, U, V, W, X> : IAction<T, U, V, W, X>
        where T : struct
        where U : struct
        where V : struct
        where W : struct
        where X : struct
    {
        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        public delegate void Delegate(T arg0, U arg1, V arg2, W arg3, X arg4);

#if !UNITY_DOTSPLAYER
        [NativeDisableUnsafePtrRestriction]
#endif
        readonly IntPtr _ptr;

        internal BurstAction(IntPtr ptr) => _ptr = ptr;

        public void Invoke(T arg0, U arg1, V arg2, W arg3, X arg4)
        {
            bool isBurst = false;
            Unity.Burst.CompilerServices.Hint.Assume(isBurst);
            if (!isBurst)
            {
                Invoke_Dotnet(arg0, arg1, arg2, arg3, arg4);
                return;
            }
            Invoke_Burst(arg0, arg1, arg2, arg3, arg4);
        }

        void Invoke_Burst(T arg0, U arg1, V arg2, W arg3, X arg4)
        {
            new FunctionPointer<Action<T, U, V, W, X>>(_ptr).Invoke(arg0, arg1, arg2, arg3, arg4);
        }

        [BurstDiscard]
        void Invoke_Dotnet(T arg0, U arg1, V arg2, W arg3, X arg4)
        {
            ((delegate* unmanaged[Cdecl]<T, U, V, W, X, void>)_ptr)(arg0, arg1, arg2, arg3, arg4);
        }
    }

    public unsafe readonly struct BurstAction<T, U, V, W, X, Y> : IAction<T, U, V, W, X, Y>
        where T : struct
        where U : struct
        where V : struct
        where W : struct
        where X : struct
        where Y : struct
    {
        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        public delegate void Delegate(T arg0, U arg1, V arg2, W arg3, X arg4, Y arg5);

#if !UNITY_DOTSPLAYER
        [NativeDisableUnsafePtrRestriction]
#endif
        readonly IntPtr _ptr;

        internal BurstAction(IntPtr ptr) => _ptr = ptr;

        public void Invoke(T arg0, U arg1, V arg2, W arg3, X arg4, Y arg5)
        {
            bool isBurst = false;
            Unity.Burst.CompilerServices.Hint.Assume(isBurst);
            if (!isBurst)
            {
                Invoke_Dotnet(arg0, arg1, arg2, arg3, arg4, arg5);
                return;
            }
            Invoke_Burst(arg0, arg1, arg2, arg3, arg4, arg5);
        }

        void Invoke_Burst(T arg0, U arg1, V arg2, W arg3, X arg4, Y arg5)
        {
            new FunctionPointer<Action<T, U, V, W, X, Y>>(_ptr).Invoke(arg0, arg1, arg2, arg3, arg4, arg5);
        }

        [BurstDiscard]
        void Invoke_Dotnet(T arg0, U arg1, V arg2, W arg3, X arg4, Y arg5)
        {
            ((delegate* unmanaged[Cdecl]<T, U, V, W, X, Y, void>)_ptr)(arg0, arg1, arg2, arg3, arg4, arg5);
        }
    }

    public unsafe readonly struct BurstAction<T, U, V, W, X, Y, Z> : IAction<T, U, V, W, X, Y, Z>
        where T : struct
        where U : struct
        where V : struct
        where W : struct
        where X : struct
        where Y : struct
        where Z : struct
    {
        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        public delegate void Delegate(T arg0, U arg1, V arg2, W arg3, X arg4, Y arg5, Z arg6);

#if !UNITY_DOTSPLAYER
        [NativeDisableUnsafePtrRestriction]
#endif
        readonly IntPtr _ptr;

        internal BurstAction(IntPtr ptr) => _ptr = ptr;

        public void Invoke(T arg0, U arg1, V arg2, W arg3, X arg4, Y arg5, Z arg6)
        {
            bool isBurst = false;
            Unity.Burst.CompilerServices.Hint.Assume(isBurst);
            if (!isBurst)
            {
                Invoke_Dotnet(arg0, arg1, arg2, arg3, arg4, arg5, arg6);
                return;
            }
            Invoke_Burst(arg0, arg1, arg2, arg3, arg4, arg5, arg6);
        }

        void Invoke_Burst(T arg0, U arg1, V arg2, W arg3, X arg4, Y arg5, Z arg6)
        {
            new FunctionPointer<Action<T, U, V, W, X, Y, Z>>(_ptr).Invoke(arg0, arg1, arg2, arg3, arg4, arg5, arg6);
        }

        [BurstDiscard]
        void Invoke_Dotnet(T arg0, U arg1, V arg2, W arg3, X arg4, Y arg5, Z arg6)
        {
            ((delegate* unmanaged[Cdecl]<T, U, V, W, X, Y, Z, void>)_ptr)(arg0, arg1, arg2, arg3, arg4, arg5, arg6);
        }
    }

}
