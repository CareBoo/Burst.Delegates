


//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Unity.Collections.LowLevel.Unsafe;
using Unity.Burst;
using System;

namespace CareBoo.Burst.Delegates
{

    public unsafe struct BurstAction //: IAction
        
    {
#if !UNITY_DOTSPLAYER
        [NativeDisableUnsafePtrRestriction]
#endif
        readonly IntPtr _ptr;

        public BurstAction(delegate*<void> ptr) => _ptr = (IntPtr)ptr;

        BurstAction(IntPtr ptr) => _ptr = ptr;

        public void Invoke() => ((delegate*<void>)_ptr)();

        public static BurstAction Compile(Action action)
        {
            var ptr = BurstCompiler.CompileFunctionPointer(action).Value;
            return new BurstAction(ptr);
        }

        public static implicit operator BurstAction(delegate*<void> ptr)
        {
            return new BurstAction(ptr);
        }

        public static implicit operator delegate*<void>(BurstAction burstAction)
        {
            return (delegate*<void>)burstAction._ptr;
        }
    }

    public unsafe struct BurstAction<T> //: IAction<T>
        
        where T : struct
    {
#if !UNITY_DOTSPLAYER
        [NativeDisableUnsafePtrRestriction]
#endif
        readonly IntPtr _ptr;

        public BurstAction(delegate*<T, void> ptr) => _ptr = (IntPtr)ptr;

        BurstAction(IntPtr ptr) => _ptr = ptr;

        public void Invoke(T arg0) => ((delegate*<T, void>)_ptr)(arg0);

        public static BurstAction<T> Compile(Action<T> action)
        {
            var ptr = BurstCompiler.CompileFunctionPointer(action).Value;
            return new BurstAction<T>(ptr);
        }

        public static implicit operator BurstAction<T>(delegate*<T, void> ptr)
        {
            return new BurstAction<T>(ptr);
        }

        public static implicit operator delegate*<T, void>(BurstAction<T> burstAction)
        {
            return (delegate*<T, void>)burstAction._ptr;
        }
    }

    public unsafe struct BurstAction<T, U> //: IAction<T, U>
        
        where T : struct
        where U : struct
    {
#if !UNITY_DOTSPLAYER
        [NativeDisableUnsafePtrRestriction]
#endif
        readonly IntPtr _ptr;

        public BurstAction(delegate*<T, U, void> ptr) => _ptr = (IntPtr)ptr;

        BurstAction(IntPtr ptr) => _ptr = ptr;

        public void Invoke(T arg0, U arg1) => ((delegate*<T, U, void>)_ptr)(arg0, arg1);

        public static BurstAction<T, U> Compile(Action<T, U> action)
        {
            var ptr = BurstCompiler.CompileFunctionPointer(action).Value;
            return new BurstAction<T, U>(ptr);
        }

        public static implicit operator BurstAction<T, U>(delegate*<T, U, void> ptr)
        {
            return new BurstAction<T, U>(ptr);
        }

        public static implicit operator delegate*<T, U, void>(BurstAction<T, U> burstAction)
        {
            return (delegate*<T, U, void>)burstAction._ptr;
        }
    }

    public unsafe struct BurstAction<T, U, V> //: IAction<T, U, V>
        
        where T : struct
        where U : struct
        where V : struct
    {
#if !UNITY_DOTSPLAYER
        [NativeDisableUnsafePtrRestriction]
#endif
        readonly IntPtr _ptr;

        public BurstAction(delegate*<T, U, V, void> ptr) => _ptr = (IntPtr)ptr;

        BurstAction(IntPtr ptr) => _ptr = ptr;

        public void Invoke(T arg0, U arg1, V arg2) => ((delegate*<T, U, V, void>)_ptr)(arg0, arg1, arg2);

        public static BurstAction<T, U, V> Compile(Action<T, U, V> action)
        {
            var ptr = BurstCompiler.CompileFunctionPointer(action).Value;
            return new BurstAction<T, U, V>(ptr);
        }

        public static implicit operator BurstAction<T, U, V>(delegate*<T, U, V, void> ptr)
        {
            return new BurstAction<T, U, V>(ptr);
        }

        public static implicit operator delegate*<T, U, V, void>(BurstAction<T, U, V> burstAction)
        {
            return (delegate*<T, U, V, void>)burstAction._ptr;
        }
    }

    public unsafe struct BurstAction<T, U, V, W> //: IAction<T, U, V, W>
        
        where T : struct
        where U : struct
        where V : struct
        where W : struct
    {
#if !UNITY_DOTSPLAYER
        [NativeDisableUnsafePtrRestriction]
#endif
        readonly IntPtr _ptr;

        public BurstAction(delegate*<T, U, V, W, void> ptr) => _ptr = (IntPtr)ptr;

        BurstAction(IntPtr ptr) => _ptr = ptr;

        public void Invoke(T arg0, U arg1, V arg2, W arg3) => ((delegate*<T, U, V, W, void>)_ptr)(arg0, arg1, arg2, arg3);

        public static BurstAction<T, U, V, W> Compile(Action<T, U, V, W> action)
        {
            var ptr = BurstCompiler.CompileFunctionPointer(action).Value;
            return new BurstAction<T, U, V, W>(ptr);
        }

        public static implicit operator BurstAction<T, U, V, W>(delegate*<T, U, V, W, void> ptr)
        {
            return new BurstAction<T, U, V, W>(ptr);
        }

        public static implicit operator delegate*<T, U, V, W, void>(BurstAction<T, U, V, W> burstAction)
        {
            return (delegate*<T, U, V, W, void>)burstAction._ptr;
        }
    }

    public unsafe struct BurstAction<T, U, V, W, X> //: IAction<T, U, V, W, X>
        
        where T : struct
        where U : struct
        where V : struct
        where W : struct
        where X : struct
    {
#if !UNITY_DOTSPLAYER
        [NativeDisableUnsafePtrRestriction]
#endif
        readonly IntPtr _ptr;

        public BurstAction(delegate*<T, U, V, W, X, void> ptr) => _ptr = (IntPtr)ptr;

        BurstAction(IntPtr ptr) => _ptr = ptr;

        public void Invoke(T arg0, U arg1, V arg2, W arg3, X arg4) => ((delegate*<T, U, V, W, X, void>)_ptr)(arg0, arg1, arg2, arg3, arg4);

        public static BurstAction<T, U, V, W, X> Compile(Action<T, U, V, W, X> action)
        {
            var ptr = BurstCompiler.CompileFunctionPointer(action).Value;
            return new BurstAction<T, U, V, W, X>(ptr);
        }

        public static implicit operator BurstAction<T, U, V, W, X>(delegate*<T, U, V, W, X, void> ptr)
        {
            return new BurstAction<T, U, V, W, X>(ptr);
        }

        public static implicit operator delegate*<T, U, V, W, X, void>(BurstAction<T, U, V, W, X> burstAction)
        {
            return (delegate*<T, U, V, W, X, void>)burstAction._ptr;
        }
    }

    public unsafe struct BurstAction<T, U, V, W, X, Y> //: IAction<T, U, V, W, X, Y>
        
        where T : struct
        where U : struct
        where V : struct
        where W : struct
        where X : struct
        where Y : struct
    {
#if !UNITY_DOTSPLAYER
        [NativeDisableUnsafePtrRestriction]
#endif
        readonly IntPtr _ptr;

        public BurstAction(delegate*<T, U, V, W, X, Y, void> ptr) => _ptr = (IntPtr)ptr;

        BurstAction(IntPtr ptr) => _ptr = ptr;

        public void Invoke(T arg0, U arg1, V arg2, W arg3, X arg4, Y arg5) => ((delegate*<T, U, V, W, X, Y, void>)_ptr)(arg0, arg1, arg2, arg3, arg4, arg5);

        public static BurstAction<T, U, V, W, X, Y> Compile(Action<T, U, V, W, X, Y> action)
        {
            var ptr = BurstCompiler.CompileFunctionPointer(action).Value;
            return new BurstAction<T, U, V, W, X, Y>(ptr);
        }

        public static implicit operator BurstAction<T, U, V, W, X, Y>(delegate*<T, U, V, W, X, Y, void> ptr)
        {
            return new BurstAction<T, U, V, W, X, Y>(ptr);
        }

        public static implicit operator delegate*<T, U, V, W, X, Y, void>(BurstAction<T, U, V, W, X, Y> burstAction)
        {
            return (delegate*<T, U, V, W, X, Y, void>)burstAction._ptr;
        }
    }

    public unsafe struct BurstAction<T, U, V, W, X, Y, Z> //: IAction<T, U, V, W, X, Y, Z>
        
        where T : struct
        where U : struct
        where V : struct
        where W : struct
        where X : struct
        where Y : struct
        where Z : struct
    {
#if !UNITY_DOTSPLAYER
        [NativeDisableUnsafePtrRestriction]
#endif
        readonly IntPtr _ptr;

        public BurstAction(delegate*<T, U, V, W, X, Y, Z, void> ptr) => _ptr = (IntPtr)ptr;

        BurstAction(IntPtr ptr) => _ptr = ptr;

        public void Invoke(T arg0, U arg1, V arg2, W arg3, X arg4, Y arg5, Z arg6) => ((delegate*<T, U, V, W, X, Y, Z, void>)_ptr)(arg0, arg1, arg2, arg3, arg4, arg5, arg6);

        public static BurstAction<T, U, V, W, X, Y, Z> Compile(Action<T, U, V, W, X, Y, Z> action)
        {
            var ptr = BurstCompiler.CompileFunctionPointer(action).Value;
            return new BurstAction<T, U, V, W, X, Y, Z>(ptr);
        }

        public static implicit operator BurstAction<T, U, V, W, X, Y, Z>(delegate*<T, U, V, W, X, Y, Z, void> ptr)
        {
            return new BurstAction<T, U, V, W, X, Y, Z>(ptr);
        }

        public static implicit operator delegate*<T, U, V, W, X, Y, Z, void>(BurstAction<T, U, V, W, X, Y, Z> burstAction)
        {
            return (delegate*<T, U, V, W, X, Y, Z, void>)burstAction._ptr;
        }
    }

}