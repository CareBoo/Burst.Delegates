



//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using Unity.Burst;
using static CareBoo.Burst.Delegates.SafetyChecks;

namespace CareBoo.Burst.Delegates
{

    public struct BurstFunc<TResult>
        : IFunc<TResult>
        where TResult : struct
    {
        readonly FunctionPointer<Func<TResult>> functionPointer;

        public BurstFunc(FunctionPointer<Func<TResult>> functionPointer)
        {
            this.functionPointer = functionPointer;
        }

        public TResult Invoke()
        {
            SupportedInBurstOnly();
            return functionPointer.Invoke();
        }

        public static BurstFunc<TResult> Compile(Func<TResult> func)
        {
            var functionPointer = BurstCompiler.CompileFunctionPointer(func);
            return new BurstFunc<TResult>(functionPointer);
        }

        public static implicit operator ValueFunc<TResult>.Struct<BurstFunc<TResult>>(BurstFunc<TResult> burstFunc)
        {
            return ValueFunc<TResult>.New(burstFunc);
        }

        public static implicit operator BurstFunc<TResult>(ValueFunc<TResult>.Struct<BurstFunc<TResult>> valueFunc)
        {
            return valueFunc.lambda;
        }
    }


    public struct BurstFunc<T, TResult>
        : IFunc<T, TResult>
        where T : struct
        where TResult : struct
    {
        readonly FunctionPointer<Func<T, TResult>> functionPointer;

        public BurstFunc(FunctionPointer<Func<T, TResult>> functionPointer)
        {
            this.functionPointer = functionPointer;
        }

        public TResult Invoke(T arg0)
        {
            SupportedInBurstOnly();
            return functionPointer.Invoke(arg0);
        }

        public static BurstFunc<T, TResult> Compile(Func<T, TResult> func)
        {
            var functionPointer = BurstCompiler.CompileFunctionPointer(func);
            return new BurstFunc<T, TResult>(functionPointer);
        }

        public static implicit operator ValueFunc<T, TResult>.Struct<BurstFunc<T, TResult>>(BurstFunc<T, TResult> burstFunc)
        {
            return ValueFunc<T, TResult>.New(burstFunc);
        }

        public static implicit operator BurstFunc<T, TResult>(ValueFunc<T, TResult>.Struct<BurstFunc<T, TResult>> valueFunc)
        {
            return valueFunc.lambda;
        }
    }


    public struct BurstFunc<T, U, TResult>
        : IFunc<T, U, TResult>
        where T : struct
        where U : struct
        where TResult : struct
    {
        readonly FunctionPointer<Func<T, U, TResult>> functionPointer;

        public BurstFunc(FunctionPointer<Func<T, U, TResult>> functionPointer)
        {
            this.functionPointer = functionPointer;
        }

        public TResult Invoke(T arg0, U arg1)
        {
            SupportedInBurstOnly();
            return functionPointer.Invoke(arg0, arg1);
        }

        public static BurstFunc<T, U, TResult> Compile(Func<T, U, TResult> func)
        {
            var functionPointer = BurstCompiler.CompileFunctionPointer(func);
            return new BurstFunc<T, U, TResult>(functionPointer);
        }

        public static implicit operator ValueFunc<T, U, TResult>.Struct<BurstFunc<T, U, TResult>>(BurstFunc<T, U, TResult> burstFunc)
        {
            return ValueFunc<T, U, TResult>.New(burstFunc);
        }

        public static implicit operator BurstFunc<T, U, TResult>(ValueFunc<T, U, TResult>.Struct<BurstFunc<T, U, TResult>> valueFunc)
        {
            return valueFunc.lambda;
        }
    }


    public struct BurstFunc<T, U, V, TResult>
        : IFunc<T, U, V, TResult>
        where T : struct
        where U : struct
        where V : struct
        where TResult : struct
    {
        readonly FunctionPointer<Func<T, U, V, TResult>> functionPointer;

        public BurstFunc(FunctionPointer<Func<T, U, V, TResult>> functionPointer)
        {
            this.functionPointer = functionPointer;
        }

        public TResult Invoke(T arg0, U arg1, V arg2)
        {
            SupportedInBurstOnly();
            return functionPointer.Invoke(arg0, arg1, arg2);
        }

        public static BurstFunc<T, U, V, TResult> Compile(Func<T, U, V, TResult> func)
        {
            var functionPointer = BurstCompiler.CompileFunctionPointer(func);
            return new BurstFunc<T, U, V, TResult>(functionPointer);
        }

        public static implicit operator ValueFunc<T, U, V, TResult>.Struct<BurstFunc<T, U, V, TResult>>(BurstFunc<T, U, V, TResult> burstFunc)
        {
            return ValueFunc<T, U, V, TResult>.New(burstFunc);
        }

        public static implicit operator BurstFunc<T, U, V, TResult>(ValueFunc<T, U, V, TResult>.Struct<BurstFunc<T, U, V, TResult>> valueFunc)
        {
            return valueFunc.lambda;
        }
    }


    public struct BurstFunc<T, U, V, W, TResult>
        : IFunc<T, U, V, W, TResult>
        where T : struct
        where U : struct
        where V : struct
        where W : struct
        where TResult : struct
    {
        readonly FunctionPointer<Func<T, U, V, W, TResult>> functionPointer;

        public BurstFunc(FunctionPointer<Func<T, U, V, W, TResult>> functionPointer)
        {
            this.functionPointer = functionPointer;
        }

        public TResult Invoke(T arg0, U arg1, V arg2, W arg3)
        {
            SupportedInBurstOnly();
            return functionPointer.Invoke(arg0, arg1, arg2, arg3);
        }

        public static BurstFunc<T, U, V, W, TResult> Compile(Func<T, U, V, W, TResult> func)
        {
            var functionPointer = BurstCompiler.CompileFunctionPointer(func);
            return new BurstFunc<T, U, V, W, TResult>(functionPointer);
        }

        public static implicit operator ValueFunc<T, U, V, W, TResult>.Struct<BurstFunc<T, U, V, W, TResult>>(BurstFunc<T, U, V, W, TResult> burstFunc)
        {
            return ValueFunc<T, U, V, W, TResult>.New(burstFunc);
        }

        public static implicit operator BurstFunc<T, U, V, W, TResult>(ValueFunc<T, U, V, W, TResult>.Struct<BurstFunc<T, U, V, W, TResult>> valueFunc)
        {
            return valueFunc.lambda;
        }
    }


    public struct BurstFunc<T, U, V, W, X, TResult>
        : IFunc<T, U, V, W, X, TResult>
        where T : struct
        where U : struct
        where V : struct
        where W : struct
        where X : struct
        where TResult : struct
    {
        readonly FunctionPointer<Func<T, U, V, W, X, TResult>> functionPointer;

        public BurstFunc(FunctionPointer<Func<T, U, V, W, X, TResult>> functionPointer)
        {
            this.functionPointer = functionPointer;
        }

        public TResult Invoke(T arg0, U arg1, V arg2, W arg3, X arg4)
        {
            SupportedInBurstOnly();
            return functionPointer.Invoke(arg0, arg1, arg2, arg3, arg4);
        }

        public static BurstFunc<T, U, V, W, X, TResult> Compile(Func<T, U, V, W, X, TResult> func)
        {
            var functionPointer = BurstCompiler.CompileFunctionPointer(func);
            return new BurstFunc<T, U, V, W, X, TResult>(functionPointer);
        }

        public static implicit operator ValueFunc<T, U, V, W, X, TResult>.Struct<BurstFunc<T, U, V, W, X, TResult>>(BurstFunc<T, U, V, W, X, TResult> burstFunc)
        {
            return ValueFunc<T, U, V, W, X, TResult>.New(burstFunc);
        }

        public static implicit operator BurstFunc<T, U, V, W, X, TResult>(ValueFunc<T, U, V, W, X, TResult>.Struct<BurstFunc<T, U, V, W, X, TResult>> valueFunc)
        {
            return valueFunc.lambda;
        }
    }


    public struct BurstFunc<T, U, V, W, X, Y, TResult>
        : IFunc<T, U, V, W, X, Y, TResult>
        where T : struct
        where U : struct
        where V : struct
        where W : struct
        where X : struct
        where Y : struct
        where TResult : struct
    {
        readonly FunctionPointer<Func<T, U, V, W, X, Y, TResult>> functionPointer;

        public BurstFunc(FunctionPointer<Func<T, U, V, W, X, Y, TResult>> functionPointer)
        {
            this.functionPointer = functionPointer;
        }

        public TResult Invoke(T arg0, U arg1, V arg2, W arg3, X arg4, Y arg5)
        {
            SupportedInBurstOnly();
            return functionPointer.Invoke(arg0, arg1, arg2, arg3, arg4, arg5);
        }

        public static BurstFunc<T, U, V, W, X, Y, TResult> Compile(Func<T, U, V, W, X, Y, TResult> func)
        {
            var functionPointer = BurstCompiler.CompileFunctionPointer(func);
            return new BurstFunc<T, U, V, W, X, Y, TResult>(functionPointer);
        }

        public static implicit operator ValueFunc<T, U, V, W, X, Y, TResult>.Struct<BurstFunc<T, U, V, W, X, Y, TResult>>(BurstFunc<T, U, V, W, X, Y, TResult> burstFunc)
        {
            return ValueFunc<T, U, V, W, X, Y, TResult>.New(burstFunc);
        }

        public static implicit operator BurstFunc<T, U, V, W, X, Y, TResult>(ValueFunc<T, U, V, W, X, Y, TResult>.Struct<BurstFunc<T, U, V, W, X, Y, TResult>> valueFunc)
        {
            return valueFunc.lambda;
        }
    }


    public struct BurstFunc<T, U, V, W, X, Y, Z, TResult>
        : IFunc<T, U, V, W, X, Y, Z, TResult>
        where T : struct
        where U : struct
        where V : struct
        where W : struct
        where X : struct
        where Y : struct
        where Z : struct
        where TResult : struct
    {
        readonly FunctionPointer<Func<T, U, V, W, X, Y, Z, TResult>> functionPointer;

        public BurstFunc(FunctionPointer<Func<T, U, V, W, X, Y, Z, TResult>> functionPointer)
        {
            this.functionPointer = functionPointer;
        }

        public TResult Invoke(T arg0, U arg1, V arg2, W arg3, X arg4, Y arg5, Z arg6)
        {
            SupportedInBurstOnly();
            return functionPointer.Invoke(arg0, arg1, arg2, arg3, arg4, arg5, arg6);
        }

        public static BurstFunc<T, U, V, W, X, Y, Z, TResult> Compile(Func<T, U, V, W, X, Y, Z, TResult> func)
        {
            var functionPointer = BurstCompiler.CompileFunctionPointer(func);
            return new BurstFunc<T, U, V, W, X, Y, Z, TResult>(functionPointer);
        }

        public static implicit operator ValueFunc<T, U, V, W, X, Y, Z, TResult>.Struct<BurstFunc<T, U, V, W, X, Y, Z, TResult>>(BurstFunc<T, U, V, W, X, Y, Z, TResult> burstFunc)
        {
            return ValueFunc<T, U, V, W, X, Y, Z, TResult>.New(burstFunc);
        }

        public static implicit operator BurstFunc<T, U, V, W, X, Y, Z, TResult>(ValueFunc<T, U, V, W, X, Y, Z, TResult>.Struct<BurstFunc<T, U, V, W, X, Y, Z, TResult>> valueFunc)
        {
            return valueFunc.lambda;
        }
    }


}