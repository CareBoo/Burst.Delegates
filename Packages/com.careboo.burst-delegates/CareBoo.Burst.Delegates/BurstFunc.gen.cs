//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------




using Unity.Collections.LowLevel.Unsafe;
using Unity.Burst;
using System;

namespace CareBoo.Burst.Delegates
{

    public unsafe readonly struct BurstFunc<TResult> : IFunc<TResult>
        where TResult : struct
    {
        unsafe ref struct Invoker
        {
#if !UNITY_DOTSPLAYER
            [NativeDisableUnsafePtrRestriction]
#endif
            readonly IntPtr _ptr;
            TResult _value;
            bool _isBurst;

            public Invoker(IntPtr ptr)
            {
                _ptr = ptr;
                _value = default;
                _isBurst = default;
            }

            public TResult Invoke()
            {
                _isBurst = true;
                Invoke_Dotnet();
                if (_isBurst)
                    Invoke_Burst();
                return _value;
            }

            void Invoke_Burst()
            {
                _value = new FunctionPointer<Func<TResult>>(_ptr).Invoke();
            }

            [BurstDiscard]
            void Invoke_Dotnet()
            {
                _isBurst = false;
                _value = ((delegate*<TResult>)_ptr)();
            }
        }

#if !UNITY_DOTSPLAYER
        [NativeDisableUnsafePtrRestriction]
#endif
        readonly IntPtr _ptr;

        internal BurstFunc(IntPtr ptr) => _ptr = ptr;

        public TResult Invoke() => new Invoker(_ptr).Invoke();
    }

    public unsafe readonly struct BurstFunc<T, TResult> : IFunc<T, TResult>
        where T : struct
        where TResult : struct
    {
        unsafe ref struct Invoker
        {
#if !UNITY_DOTSPLAYER
            [NativeDisableUnsafePtrRestriction]
#endif
            readonly IntPtr _ptr;
            TResult _value;
            bool _isBurst;

            public Invoker(IntPtr ptr)
            {
                _ptr = ptr;
                _value = default;
                _isBurst = default;
            }

            public TResult Invoke(T arg0)
            {
                _isBurst = true;
                Invoke_Dotnet(arg0);
                if (_isBurst)
                    Invoke_Burst(arg0);
                return _value;
            }

            void Invoke_Burst(T arg0)
            {
                _value = new FunctionPointer<Func<T, TResult>>(_ptr).Invoke(arg0);
            }

            [BurstDiscard]
            void Invoke_Dotnet(T arg0)
            {
                _isBurst = false;
                _value = ((delegate*<T, TResult>)_ptr)(arg0);
            }
        }

#if !UNITY_DOTSPLAYER
        [NativeDisableUnsafePtrRestriction]
#endif
        readonly IntPtr _ptr;

        internal BurstFunc(IntPtr ptr) => _ptr = ptr;

        public TResult Invoke(T arg0) => new Invoker(_ptr).Invoke(arg0);
    }

    public unsafe readonly struct BurstFunc<T, U, TResult> : IFunc<T, U, TResult>
        where T : struct
        where U : struct
        where TResult : struct
    {
        unsafe ref struct Invoker
        {
#if !UNITY_DOTSPLAYER
            [NativeDisableUnsafePtrRestriction]
#endif
            readonly IntPtr _ptr;
            TResult _value;
            bool _isBurst;

            public Invoker(IntPtr ptr)
            {
                _ptr = ptr;
                _value = default;
                _isBurst = default;
            }

            public TResult Invoke(T arg0, U arg1)
            {
                _isBurst = true;
                Invoke_Dotnet(arg0, arg1);
                if (_isBurst)
                    Invoke_Burst(arg0, arg1);
                return _value;
            }

            void Invoke_Burst(T arg0, U arg1)
            {
                _value = new FunctionPointer<Func<T, U, TResult>>(_ptr).Invoke(arg0, arg1);
            }

            [BurstDiscard]
            void Invoke_Dotnet(T arg0, U arg1)
            {
                _isBurst = false;
                _value = ((delegate*<T, U, TResult>)_ptr)(arg0, arg1);
            }
        }

#if !UNITY_DOTSPLAYER
        [NativeDisableUnsafePtrRestriction]
#endif
        readonly IntPtr _ptr;

        internal BurstFunc(IntPtr ptr) => _ptr = ptr;

        public TResult Invoke(T arg0, U arg1) => new Invoker(_ptr).Invoke(arg0, arg1);
    }

    public unsafe readonly struct BurstFunc<T, U, V, TResult> : IFunc<T, U, V, TResult>
        where T : struct
        where U : struct
        where V : struct
        where TResult : struct
    {
        unsafe ref struct Invoker
        {
#if !UNITY_DOTSPLAYER
            [NativeDisableUnsafePtrRestriction]
#endif
            readonly IntPtr _ptr;
            TResult _value;
            bool _isBurst;

            public Invoker(IntPtr ptr)
            {
                _ptr = ptr;
                _value = default;
                _isBurst = default;
            }

            public TResult Invoke(T arg0, U arg1, V arg2)
            {
                _isBurst = true;
                Invoke_Dotnet(arg0, arg1, arg2);
                if (_isBurst)
                    Invoke_Burst(arg0, arg1, arg2);
                return _value;
            }

            void Invoke_Burst(T arg0, U arg1, V arg2)
            {
                _value = new FunctionPointer<Func<T, U, V, TResult>>(_ptr).Invoke(arg0, arg1, arg2);
            }

            [BurstDiscard]
            void Invoke_Dotnet(T arg0, U arg1, V arg2)
            {
                _isBurst = false;
                _value = ((delegate*<T, U, V, TResult>)_ptr)(arg0, arg1, arg2);
            }
        }

#if !UNITY_DOTSPLAYER
        [NativeDisableUnsafePtrRestriction]
#endif
        readonly IntPtr _ptr;

        internal BurstFunc(IntPtr ptr) => _ptr = ptr;

        public TResult Invoke(T arg0, U arg1, V arg2) => new Invoker(_ptr).Invoke(arg0, arg1, arg2);
    }

    public unsafe readonly struct BurstFunc<T, U, V, W, TResult> : IFunc<T, U, V, W, TResult>
        where T : struct
        where U : struct
        where V : struct
        where W : struct
        where TResult : struct
    {
        unsafe ref struct Invoker
        {
#if !UNITY_DOTSPLAYER
            [NativeDisableUnsafePtrRestriction]
#endif
            readonly IntPtr _ptr;
            TResult _value;
            bool _isBurst;

            public Invoker(IntPtr ptr)
            {
                _ptr = ptr;
                _value = default;
                _isBurst = default;
            }

            public TResult Invoke(T arg0, U arg1, V arg2, W arg3)
            {
                _isBurst = true;
                Invoke_Dotnet(arg0, arg1, arg2, arg3);
                if (_isBurst)
                    Invoke_Burst(arg0, arg1, arg2, arg3);
                return _value;
            }

            void Invoke_Burst(T arg0, U arg1, V arg2, W arg3)
            {
                _value = new FunctionPointer<Func<T, U, V, W, TResult>>(_ptr).Invoke(arg0, arg1, arg2, arg3);
            }

            [BurstDiscard]
            void Invoke_Dotnet(T arg0, U arg1, V arg2, W arg3)
            {
                _isBurst = false;
                _value = ((delegate*<T, U, V, W, TResult>)_ptr)(arg0, arg1, arg2, arg3);
            }
        }

#if !UNITY_DOTSPLAYER
        [NativeDisableUnsafePtrRestriction]
#endif
        readonly IntPtr _ptr;

        internal BurstFunc(IntPtr ptr) => _ptr = ptr;

        public TResult Invoke(T arg0, U arg1, V arg2, W arg3) => new Invoker(_ptr).Invoke(arg0, arg1, arg2, arg3);
    }

    public unsafe readonly struct BurstFunc<T, U, V, W, X, TResult> : IFunc<T, U, V, W, X, TResult>
        where T : struct
        where U : struct
        where V : struct
        where W : struct
        where X : struct
        where TResult : struct
    {
        unsafe ref struct Invoker
        {
#if !UNITY_DOTSPLAYER
            [NativeDisableUnsafePtrRestriction]
#endif
            readonly IntPtr _ptr;
            TResult _value;
            bool _isBurst;

            public Invoker(IntPtr ptr)
            {
                _ptr = ptr;
                _value = default;
                _isBurst = default;
            }

            public TResult Invoke(T arg0, U arg1, V arg2, W arg3, X arg4)
            {
                _isBurst = true;
                Invoke_Dotnet(arg0, arg1, arg2, arg3, arg4);
                if (_isBurst)
                    Invoke_Burst(arg0, arg1, arg2, arg3, arg4);
                return _value;
            }

            void Invoke_Burst(T arg0, U arg1, V arg2, W arg3, X arg4)
            {
                _value = new FunctionPointer<Func<T, U, V, W, X, TResult>>(_ptr).Invoke(arg0, arg1, arg2, arg3, arg4);
            }

            [BurstDiscard]
            void Invoke_Dotnet(T arg0, U arg1, V arg2, W arg3, X arg4)
            {
                _isBurst = false;
                _value = ((delegate*<T, U, V, W, X, TResult>)_ptr)(arg0, arg1, arg2, arg3, arg4);
            }
        }

#if !UNITY_DOTSPLAYER
        [NativeDisableUnsafePtrRestriction]
#endif
        readonly IntPtr _ptr;

        internal BurstFunc(IntPtr ptr) => _ptr = ptr;

        public TResult Invoke(T arg0, U arg1, V arg2, W arg3, X arg4) => new Invoker(_ptr).Invoke(arg0, arg1, arg2, arg3, arg4);
    }

    public unsafe readonly struct BurstFunc<T, U, V, W, X, Y, TResult> : IFunc<T, U, V, W, X, Y, TResult>
        where T : struct
        where U : struct
        where V : struct
        where W : struct
        where X : struct
        where Y : struct
        where TResult : struct
    {
        unsafe ref struct Invoker
        {
#if !UNITY_DOTSPLAYER
            [NativeDisableUnsafePtrRestriction]
#endif
            readonly IntPtr _ptr;
            TResult _value;
            bool _isBurst;

            public Invoker(IntPtr ptr)
            {
                _ptr = ptr;
                _value = default;
                _isBurst = default;
            }

            public TResult Invoke(T arg0, U arg1, V arg2, W arg3, X arg4, Y arg5)
            {
                _isBurst = true;
                Invoke_Dotnet(arg0, arg1, arg2, arg3, arg4, arg5);
                if (_isBurst)
                    Invoke_Burst(arg0, arg1, arg2, arg3, arg4, arg5);
                return _value;
            }

            void Invoke_Burst(T arg0, U arg1, V arg2, W arg3, X arg4, Y arg5)
            {
                _value = new FunctionPointer<Func<T, U, V, W, X, Y, TResult>>(_ptr).Invoke(arg0, arg1, arg2, arg3, arg4, arg5);
            }

            [BurstDiscard]
            void Invoke_Dotnet(T arg0, U arg1, V arg2, W arg3, X arg4, Y arg5)
            {
                _isBurst = false;
                _value = ((delegate*<T, U, V, W, X, Y, TResult>)_ptr)(arg0, arg1, arg2, arg3, arg4, arg5);
            }
        }

#if !UNITY_DOTSPLAYER
        [NativeDisableUnsafePtrRestriction]
#endif
        readonly IntPtr _ptr;

        internal BurstFunc(IntPtr ptr) => _ptr = ptr;

        public TResult Invoke(T arg0, U arg1, V arg2, W arg3, X arg4, Y arg5) => new Invoker(_ptr).Invoke(arg0, arg1, arg2, arg3, arg4, arg5);
    }

    public unsafe readonly struct BurstFunc<T, U, V, W, X, Y, Z, TResult> : IFunc<T, U, V, W, X, Y, Z, TResult>
        where T : struct
        where U : struct
        where V : struct
        where W : struct
        where X : struct
        where Y : struct
        where Z : struct
        where TResult : struct
    {
        unsafe ref struct Invoker
        {
#if !UNITY_DOTSPLAYER
            [NativeDisableUnsafePtrRestriction]
#endif
            readonly IntPtr _ptr;
            TResult _value;
            bool _isBurst;

            public Invoker(IntPtr ptr)
            {
                _ptr = ptr;
                _value = default;
                _isBurst = default;
            }

            public TResult Invoke(T arg0, U arg1, V arg2, W arg3, X arg4, Y arg5, Z arg6)
            {
                _isBurst = true;
                Invoke_Dotnet(arg0, arg1, arg2, arg3, arg4, arg5, arg6);
                if (_isBurst)
                    Invoke_Burst(arg0, arg1, arg2, arg3, arg4, arg5, arg6);
                return _value;
            }

            void Invoke_Burst(T arg0, U arg1, V arg2, W arg3, X arg4, Y arg5, Z arg6)
            {
                _value = new FunctionPointer<Func<T, U, V, W, X, Y, Z, TResult>>(_ptr).Invoke(arg0, arg1, arg2, arg3, arg4, arg5, arg6);
            }

            [BurstDiscard]
            void Invoke_Dotnet(T arg0, U arg1, V arg2, W arg3, X arg4, Y arg5, Z arg6)
            {
                _isBurst = false;
                _value = ((delegate*<T, U, V, W, X, Y, Z, TResult>)_ptr)(arg0, arg1, arg2, arg3, arg4, arg5, arg6);
            }
        }

#if !UNITY_DOTSPLAYER
        [NativeDisableUnsafePtrRestriction]
#endif
        readonly IntPtr _ptr;

        internal BurstFunc(IntPtr ptr) => _ptr = ptr;

        public TResult Invoke(T arg0, U arg1, V arg2, W arg3, X arg4, Y arg5, Z arg6) => new Invoker(_ptr).Invoke(arg0, arg1, arg2, arg3, arg4, arg5, arg6);
    }

}
